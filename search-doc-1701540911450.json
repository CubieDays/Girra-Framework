[{"title":"GirraFramework","type":0,"sectionRef":"#","url":"/Girra-Framework/api/GirraFramework","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"GirraFramework","url":"/Girra-Framework/api/GirraFramework#functions","content":" "},{"title":"GetClient​","type":1,"pageTitle":"GirraFramework","url":"/Girra-Framework/api/GirraFramework#GetClient","content":"This item only works when running on the client. Client &lt;/&gt; GirraFramework:GetClient() → GirraClient local Gira = require(game.ReplicatedStorage.Gira):GetClient()   "},{"title":"GetServer​","type":1,"pageTitle":"GirraFramework","url":"/Girra-Framework/api/GirraFramework#GetServer","content":"This item only works when running on the server. Server &lt;/&gt; GirraFramework:GetServer() → GirraServer local Gira = require(game.ReplicatedStorage.Gira):GetServer()   "},{"title":"GetFrameworkServer​","type":1,"pageTitle":"GirraFramework","url":"/Girra-Framework/api/GirraFramework#GetFrameworkServer","content":"This item only works when running on the server. Server &lt;/&gt; GirraFramework:GetFrameworkServer() → GirraServer Allias for Girra:GetServer()  "},{"title":"GetFrameworkClient​","type":1,"pageTitle":"GirraFramework","url":"/Girra-Framework/api/GirraFramework#GetFrameworkClient","content":"This item only works when running on the client. Client &lt;/&gt; GirraFramework:GetFrameworkClient() → GirraClient Allias for Girra:GetClient() "},{"title":"GirraServer","type":0,"sectionRef":"#","url":"/Girra-Framework/api/GirraServer","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#types","content":" "},{"title":"Debugging​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#Debugging","content":"&lt;/&gt; type Debugging = { InGameDebugging: { JobDebugging: boolean, SignalDebugging: boolean, NetworkDebugging: boolean }, InStudioDebugging: { JobDebugging: boolean, SignalDebugging: boolean, NetworkDebugging: boolean } } Debugging Settings  "},{"title":"Settings​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#Settings","content":"&lt;/&gt; type Settings = {Debugging: Debugging}  Used by Girra.Start() This Type Is used for Girra.Start() Function  "},{"title":"Job​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#Job","content":"&lt;/&gt; interface Job { Name: string; OnInit: () → () OnStart: () → () OnStep: (deltaTime: number) → () Heartbeat: (deltaTime: number) → () Fire: (Name: string) → () Hire: (Name: string) → HiredEmploy Employes: {[any]: {Work: ()}} } Class Job of GirraServer Which Is Module.  "},{"title":"HiredEmploy​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#HiredEmploy","content":"&lt;/&gt; interface HiredEmploy { Job:: Job Work: () } Class Employ of GirraServer Which Is Module.  "},{"title":"Employ​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#Employ","content":"&lt;/&gt; interface Employ { Name: string; OnWork: (self: any) OnHire: (self: any) } Class Employ of GirraServer Which Is Module.  "},{"title":"Network​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#Network","content":"&lt;/&gt; interface Network { Fire: ( Player , any ) → () FireAll: (any: any) → () Listen: ( Player: Player , any ) → () Connect: ( Player: Player , any ) → () Once: ( Player: Player , any ) → () Invoke: ( timeout: number, Player: Player , any ) → () InvokeAll: ( timeout: number, any ) → () InvokeExcept: ( Players: {Player: Player }, timeout: number, any ) → () FireExcept: ( Players: {Player: Player }, any ) → () IsListening: () → boolean, Connected:: boolean Disconnect: () → () Destroy: () → () } Type Network of GirraServer Which IsA Network Object.  "},{"title":"Signal​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#Signal","content":"&lt;/&gt; interface Signal { IsActive: () → boolean, Connect: (Callback: (...any) → ()) → RBXScriptConnection, Listen: (Callback: (...any) → ()) → RBXScriptConnection, Once: (Callback: (...any) → ()) → RBXScriptConnection, Wait: () → (...any), Fire: (...any) → (), DisconnectAll: () → (), Destroy: () → (), Disconnect: () → () } Type Signal of GirraServer Which IsA Signal Object: Signal.new().  "},{"title":"Services​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#Services","content":"&lt;/&gt; interface Services { Players: Players UserInputService: UserInputService RunService: RunService ReplicatedStorage: ReplicatedStorage Workspace: Workspace } Type Services of GirraServer Which IsA Table Contains Game-Services. "},{"title":"Properties​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#properties","content":" "},{"title":"Services​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#Services","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; GirraServer.Services: Services Refrence to Used Game Services example: local Girra = require(game.ReplicatedStorage.Girra):GetServer() local Services = Girra.Services --&gt; InputBegan Function: Services.UserInputService.InputBegan:Connect(function() end)  "},{"title":"Functions​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#functions","content":" "},{"title":"Start​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#Start","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; GirraServer.Start(GameLocation: Instance | number) → () → (Settings) Starts Girra on the Server-Side! local Girra = require(game.ReplicatedStorage.Girra):GetServer() Girra.Start(0) { Debugging = { InGameDebugging = { SignalDebugging = false } InStudioDebugging = { SignalDebugging = true } } } --&gt; 0 Means default GameLocation Location which is playerscripts   "},{"title":"OnStart​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#OnStart","content":"&lt;/&gt; GirraServer.OnStart(callback: (...any) → ()) → RBXScriptConnection  Returns an RBXScriptConnection. local Girra = require(game.ReplicatedStorage.Girra):GetServer() Girra.OnStart(function() print(&quot;Started!&quot;) end) Runs when Girra Framework Starts on Server! caution This function should be on top of .Start() function  "},{"title":"GetJob​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#GetJob","content":"&lt;/&gt; GirraServer.GetJob(Name: string) → Job Gets a Job From the Jobs Folder. local Girra = require(game.ReplicatedStorage.Girra):GetServer() Girra.GetJob(&quot;MyJob&quot;):DoSomething()   "},{"title":"Begin​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#Begin","content":"&lt;/&gt; GirraServer.Begin(JobsFolder: Folder | number) → (Settings: Settings) → () Another Way to Start Girra, It's recommended for Job intellisense. local Girra = require(game.ReplicatedStorage.Girra):GetServer() Girra.Begin(0) { Debugging = { InStudioDebugging = { NetworkDebugging = false, } } }   "},{"title":"GetData​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#GetData","content":"&lt;/&gt; GirraServer.GetData() → Data Returns Data Library  "},{"title":"CreateSignal​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#CreateSignal","content":"&lt;/&gt; GirraServer.CreateSignal() → Signal Creates a Signal that can be used to intract with Job to Job local Girra = require(game.ReplicatedStorage.Girra):GetServer() local Job = {} --&gt; Example Job.Signal = Girra.CreateSignal() Job.Signal:Fire(&quot;Hello Other Job!&quot;) Debugging Currently Debugging will not work in Signal we will work on updates to make signal debugging  "},{"title":"CreateNetwork​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#CreateNetwork","content":"&lt;/&gt; GirraServer.CreateNetwork(Name: string) → Network Creates a network that communicate between Server-Job and Client-Job local Girra = require(game.ReplicatedStorage.Girra):GetServer() local Network = Girra.CreateNetwork(&quot;MyNetwork&quot;) Network:Fire([Player], &quot;Hello From Job To Job!&quot;)   "},{"title":"CreateJob​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#CreateJob","content":"&lt;/&gt; GirraServer.CreateJob() → (Job) → () Main Function used for .Start() and not .Begin(). local Girra = require(game.ReplicatedStorage.Girra):GetServer() local MyJob = Girra.CreateJob() { Name = &quot;MyJob&quot; }   "},{"title":"CreateEmploy​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#CreateEmploy","content":"&lt;/&gt; GirraServer.CreateEmploy() → (Employ) → () Creates Employ local Girra = require(game.ReplicatedStorage.Girra):GetServer() local MyEmploy = Girra.CreateEmploy() ({ Name = &quot;MyEmploy&quot; })  "},{"title":"Data","type":0,"sectionRef":"#","url":"/Girra-Framework/api/Data","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Data","url":"/Girra-Framework/api/Data#types","content":" "},{"title":"Profile​","type":1,"pageTitle":"Data","url":"/Girra-Framework/api/Data#Profile","content":"&lt;/&gt; interface Profile { Player: {Data: {...: any}} }   "},{"title":"DataStore​","type":1,"pageTitle":"Data","url":"/Girra-Framework/api/Data#DataStore","content":"&lt;/&gt; interface DataStore { Get: ( self: Data, Player: Player , Key: string ) → () Set: ( self: Data, Player: Player , Key: string, Value: any ) → () Update: ( self: Data, Player: Player , Key: string, Callback: (OldData) → () ) }  "},{"title":"Functions​","type":1,"pageTitle":"Data","url":"/Girra-Framework/api/Data#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Data","url":"/Girra-Framework/api/Data#new","content":"&lt;/&gt; Data.new( Name: string, DataTable: {any: any} ) → Data This is the main function which creates a new data with the given name and the given table local Data = Framework:GetData() local NewData = Data.new(&quot;leaderstats&quot;, { [&quot;Cash&quot;] = 15, }) It Returns a metatable of empty table and Data which have .__index metamethod.  "},{"title":"GetData​","type":1,"pageTitle":"Data","url":"/Girra-Framework/api/Data#GetData","content":"&lt;/&gt; Data.GetData(Name: string) → Data This function Gets created data From The Data Library local Data = Framework:GetData() local NewData = Data.new(&quot;leaderstats&quot;, { [&quot;Cash&quot;] = 15, }) Data:GetData(&quot;leaderstats&quot;):Set([Player], &quot;Cash&quot;, 200) It Returns a metatable of empty table and Data which have .__index metamethod.  "},{"title":"GetProfile​","type":1,"pageTitle":"Data","url":"/Girra-Framework/api/Data#GetProfile","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Data:GetProfile(Player: Player ) → () This function returns the profile of the player local Data = Framework:GetData() local MyData = Data.new(&quot;leaderstats&quot;, {}) local PlayerData = MyData:GetProfile(&quot;[PlayerName]&quot;)   "},{"title":"Get​","type":1,"pageTitle":"Data","url":"/Girra-Framework/api/Data#Get","content":"&lt;/&gt; Data:Get( Player: Player , Key: string ) → () local Data = Framework:GetData() local MyData = Data.new(&quot;leaderstats&quot;, {Cash = 15}) local Cash = MyData:Get(&quot;[PlayerName]&quot;, &quot;Cash&quot;) --&gt; 15 This function returns the profilekey of the player Profile  "},{"title":"Set​","type":1,"pageTitle":"Data","url":"/Girra-Framework/api/Data#Set","content":"&lt;/&gt; Data:Set( Player: Player , Key: string, Value: any ) → () Same as Get Function but it sets the ProfileKey of the Player Profile local Data = Framework:GetData() local MyData = Data.new(&quot;leaderstats&quot;, {Cash = 15}) local Cash = MyData:Set(&quot;[PlayerName]&quot;, &quot;Cash&quot;, 20) --&gt; 20   "},{"title":"Update​","type":1,"pageTitle":"Data","url":"/Girra-Framework/api/Data#Update","content":"&lt;/&gt; Data:Update( Player: Player , Key: string, Callback: (OldData: any) → () ) → () Updates the ProfileKey with The return of the Given Callback function with argument of OldData local Data = Framework:GetData() local MyData = Data.new(&quot;leaderstats&quot;, {Cash = 15}) MyData:Update(&quot;[PlayerName]&quot;, &quot;Cash&quot;, function(Old) return Cash + 10 --&gt; 25 end) print(MyData:Get(&quot;[PlayerName]&quot;, &quot;Cash&quot;)) --&gt; 25  "},{"title":"GirraClient","type":0,"sectionRef":"#","url":"/Girra-Framework/api/GirraClient","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#types","content":" "},{"title":"Debugging​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#Debugging","content":"&lt;/&gt; type Debugging = { InGameDebugging: { JobDebugging: boolean, SignalDebugging: boolean, NetworkDebugging: boolean }, InStudioDebugging: { JobDebugging: boolean, SignalDebugging: boolean, NetworkDebugging: boolean } } Debugging Settings  "},{"title":"Settings​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#Settings","content":"&lt;/&gt; type Settings = {Debugging: Debugging}  Used by Girra.Start() This Type Is used for Girra.Start() Function  "},{"title":"Job​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#Job","content":"&lt;/&gt; interface Job { Name: string; OnInit: () → () OnStart: () → () OnStep: (deltaTime: number) → () Heartbeat: (deltaTime: number) → () OnRender: (deltaTime: number) → () Fire: (Name: string) → () Hire: (Name: string) → HiredEmploy } Class Job of GirraClient Which Is Module.  "},{"title":"HiredEmploy​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#HiredEmploy","content":"&lt;/&gt; interface HiredEmploy { Job:: Job Work: () } Class Employ of GirraClient Which Is Module.  "},{"title":"Employ​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#Employ","content":"&lt;/&gt; interface Employ { Name: string; OnWork: (self: any) OnHire: (self: any) } Class Employ of GirraClient Which Is Module.  "},{"title":"Signal​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#Signal","content":"&lt;/&gt; interface Signal { IsActive: () → boolean, Connect: (Callback: (...any) → ()) → RBXScriptConnection, Listen: (Callback: (...any) → ()) → RBXScriptConnection, Once: (Callback: (...any) → ()) → RBXScriptConnection, Wait: () → (...any), Fire: (...any) → (), DisconnectAll: () → (), Destroy: () → (), Disconnect: () → () } Type Signal of GirraClient Which IsA Signal Object: Signal.new().  "},{"title":"Network​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#Network","content":"&lt;/&gt; interface Network { Listen: (Callback: (...any) → ()) → () Once: (Callback: (...any) → ()) → () Fire: (...: any) → () Invoke: (...: any) → () Disconnect(): → () Destroy(): → () Wait(Time:: number) → () IsListening: =() → boolean } Type Network of GirraClient Which IsA Network Object.  "},{"title":"Services​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#Services","content":"&lt;/&gt; interface Services { Players: Players UserInputService: UserInputService RunService: RunService ReplicatedStorage: ReplicatedStorage Workspace: Workspace } Type Services of GirraClient Which IsA Table Contains Game-Services. "},{"title":"Properties​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#properties","content":" "},{"title":"Services​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#Services","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; GirraClient.Services: Services Refrence to Used Game Services example: local Girra = require(game.ReplicatedStorage.Girra):GetClient() local Services = Girra.Services --&gt; InputBegan Function: Services.UserInputService.InputBegan:Connect(function() end)   "},{"title":"Client​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#Client","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; GirraClient.Client: Player  Refrence to Players.LocalPlayer local Girra = require(game.ReplicatedStorage.Girra):GetClient() print(Girra.Client.Name) --&gt; Prints Player Name   "},{"title":"Gui​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#Gui","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; GirraClient.Gui: PlayerGui  Refrence to Client.PlayerGui local Girra = require(game.ReplicatedStorage.Girra):GetClient() print(Girra.Gui.Name) --&gt; Prints PlayerGui  "},{"title":"Functions​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#functions","content":" "},{"title":"Start​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#Start","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; GirraClient.Start(GameLocation: any) → () → (Settings) Starts Girra on the Client-Side! local Girra = require(game.ReplicatedStorage.Girra):GetClient() Girra.Start(0) { Debugging = { InGameDebugging = { SignalDebugging = false } InStudioDebugging = { SignalDebugging = true } } } --&gt; 0 Means default GameLocation Location which is playerscripts   "},{"title":"OnStart​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#OnStart","content":"&lt;/&gt; GirraClient.OnStart(Callback: (...any) → ()) → RBXScriptConnection  Returns an RBXScriptConnection. local Girra = require(game.ReplicatedStorage.Girra):GetClient() Girra.OnStart(function() print(&quot;Started!&quot;) end) Runs when Girra Framework Starts on Client! caution This function should be on top of .Start() function  "},{"title":"GetJob​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#GetJob","content":"&lt;/&gt; GirraClient.GetJob(Name: string) → Job Gets a Job From the Jobs Folder. local Girra = require(game.ReplicatedStorage.Girra):GetClient() Girra.GetJob(&quot;MyJob&quot;):DoSomething()   "},{"title":"Begin​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#Begin","content":"&lt;/&gt; GirraClient.Begin(JobsFolder: Folder | number) → (Settings: Settings) → () Another Way to Start Girra, It's recommended for intellisense. local Girra = require(game.ReplicatedStorage.Girra):GetClient() Girra.Begin(0) { Debugging = { InStudioDebugging = { NetworkDebugging = false, } } }   "},{"title":"CreateSignal​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#CreateSignal","content":"&lt;/&gt; GirraClient.CreateSignal() → Signal Creates a Signal that can be used to intract with Job to Job local Girra = require(game.ReplicatedStorage.Girra):GetClient() local Job = {} --&gt; Example Job.Signal = Girra.CreateSignal() Job.Signal:Fire(&quot;Hello Other Job!&quot;) Debugging Currently Debugging will not work in Signal we will work on updates to make signal debugging  "},{"title":"GetNetwork​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#GetNetwork","content":"&lt;/&gt; GirraClient.GetNetwork(Name: string) → Network Gets a network that's created in server-side local Girra = require(game.ReplicatedStorage.Girra):GetClient() local Network = Girra.GetNetwork(&quot;MyNetwork&quot;) Network:Fire(&quot;Hello From Client-Job!&quot;)   "},{"title":"CreateJob​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#CreateJob","content":"&lt;/&gt; GirraClient.CreateJob() → (Job) → () Main Function used for .Start() and not .Begin() For Creating Jobs. local Girra = require(game.ReplicatedStorage.Girra):GetClient() local MyJob = Girra.CreateJob() { Name = &quot;MyJob&quot; }   "},{"title":"CreateEmploy​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#CreateEmploy","content":"&lt;/&gt; GirraClient.CreateEmploy() → (Employ) → () Creates Employ local Girra = require(game.ReplicatedStorage.Girra):GetClient() local MyEmploy = Girra.CreateEmploy() ({ Name = &quot;MyEmploy&quot; })  "},{"title":"Installation","type":0,"sectionRef":"#","url":"/Girra-Framework/docs/Installation","content":"","keywords":""},{"title":"Roblox Studio​","type":1,"pageTitle":"Installation","url":"/Girra-Framework/docs/Installation#roblox-studio","content":"Download Girra Framework rbxm from the github repository releases page "},{"title":"Rojo & Wally​","type":1,"pageTitle":"Installation","url":"/Girra-Framework/docs/Installation#rojo--wally","content":"Add Girra to your dependencies replace @latest with the latest girra release from github repository. wally.toml [dependencies] Girra = &quot;cubiedays/girra@latest&quot;  "},{"title":"About","type":0,"sectionRef":"#","url":"/Girra-Framework/docs/intro","content":"","keywords":""},{"title":"Features​","type":1,"pageTitle":"About","url":"/Girra-Framework/docs/intro#features","content":"Fast and lightweightEasy-to-use code structureEliminates the need to use remote events and BindableEventsSimplifies the process of organizing your project "},{"title":"Usage​","type":1,"pageTitle":"About","url":"/Girra-Framework/docs/intro#usage","content":"To use Girra Framework, follow these steps: Install and Require the Girra Framework module.Use the framework's Jobs, classes, Dependencies, and functions to create a well-structured project that is easy to navigate. "},{"title":"Conclusion​","type":1,"pageTitle":"About","url":"/Girra-Framework/docs/intro#conclusion","content":"Girra Framework is a great choice for anyone looking to simplify the process of organizing their Roblox Studio project. With its easy-to-use code structure and fast performance, you can focus on creating your game without worrying about the underlying architecture. "},{"title":"Employes","type":0,"sectionRef":"#","url":"/Girra-Framework/docs/Employes","content":"","keywords":""},{"title":"Employes In General​","type":1,"pageTitle":"Employes","url":"/Girra-Framework/docs/Employes#employes-in-general","content":"An Employ is an object that does not more than one operation. Employ is like a dependency for a job that can be used to operate something or save something. "},{"title":"How to Get / Make Employes?​","type":1,"pageTitle":"Employes","url":"/Girra-Framework/docs/Employes#how-to-get--make-employes","content":"Somewhere there's functions and properties inside your job that automaticly created Job: { Fire: (Name: string) -&gt; () Hire: (Name: string) -&gt; Employ Employes: { [any]: Employ } --&gt; Some Other Methods And Objects }  note Employ's Functions Are not the Same When Hiring an Employ it will return this table { Work: (), Job: {} } local Job = Girra.CreateJob() { Name = &quot;Test&quot; } local Employ = Job.Hire(&quot;Employ&quot;).Work() print(Employ.Job.Name) --&gt; Test  When you can Hire and What Can you hire?​ You can hire if the employ is not already working on another job like: Job1.Hire(&quot;MyEmploy&quot;) --&gt; Success Will Continue and Return The Employ Job2.Hire(&quot;MyEmploy&quot;) --&gt; Fails and Errors  You can only Hire Employes that are required by the default .Start() Function and Stored Inside Employes Local Table. Making Employes is not diffcult or new it's just like creating a job but it has some unique functions different than job functions + passing some functions will be useless local Employ = Girra.CreateEmploy() { Name = &quot;Employ&quot; } function Employ:OnWork() print(&quot;Worked&quot;) --&gt; Working end function Employ:OnHire() print(&quot;Hired&quot;) --&gt; Hired return function() print(&quot;Fired&quot;) --&gt; Fired end end  "},{"title":"Starting Framework","type":0,"sectionRef":"#","url":"/Girra-Framework/docs/Client/Starting Framework","content":"","keywords":""},{"title":"Starting:​","type":1,"pageTitle":"Starting Framework","url":"/Girra-Framework/docs/Client/Starting Framework#starting","content":""},{"title":"1. Require Girra Client-Side Framework​","type":1,"pageTitle":"Starting Framework","url":"/Girra-Framework/docs/Client/Starting Framework#1-require-girra-client-side-framework","content":"local Girra = require(game.ReplicatedStorage.Packages.Girra):GetClient()  "},{"title":"2. Start the Framework and Customize the Settings:​","type":1,"pageTitle":"Starting Framework","url":"/Girra-Framework/docs/Client/Starting Framework#2-start-the-framework-and-customize-the-settings","content":"local Girra = require(game.ReplicatedStorage.Packages.Girra):GetClient() Girra.Start() ({ Debugging = { InStudioDebugging = { JobDebugging = true, NetworkDebugging = true, SignalDebugging = false, } }; }) Girra.OnStart(function() print(&quot;[ Client Framework ]: Successfully Started!&quot;) end)  "},{"title":"Starting Framework","type":0,"sectionRef":"#","url":"/Girra-Framework/docs/Server/Starting Framework","content":"","keywords":""},{"title":"Starting:​","type":1,"pageTitle":"Starting Framework","url":"/Girra-Framework/docs/Server/Starting Framework#starting","content":""},{"title":"1. Require Girra Server-Side Framework​","type":1,"pageTitle":"Starting Framework","url":"/Girra-Framework/docs/Server/Starting Framework#1-require-girra-server-side-framework","content":"local Girra = require(game.ReplicatedStorage.Packages.Girra):GetServer()  "},{"title":"2. Start the Framework and Customize the Settings:​","type":1,"pageTitle":"Starting Framework","url":"/Girra-Framework/docs/Server/Starting Framework#2-start-the-framework-and-customize-the-settings","content":"local Girra = require(game.ReplicatedStorage.Packages.Girra):GetServer() Girra.Start() ({ Debugging = { InStudioDebugging = { JobDebugging = true, NetworkDebugging = true, SignalDebugging = false, } }; }) Girra.OnStart(function() print(&quot;[ Server Framework ]: Successfully Started!&quot;) end)  "},{"title":"Jobs","type":0,"sectionRef":"#","url":"/Girra-Framework/docs/Jobs","content":"","keywords":""},{"title":"What are the Jobs?​","type":1,"pageTitle":"Jobs","url":"/Girra-Framework/docs/Jobs#what-are-the-jobs","content":"Jobs Defines into two: Server-Jobs And Client-Jobs. "},{"title":"Client Jobs​","type":1,"pageTitle":"Jobs","url":"/Girra-Framework/docs/Jobs#client-jobs","content":""},{"title":"Folder Location​","type":1,"pageTitle":"Jobs","url":"/Girra-Framework/docs/Jobs#folder-location","content":"The Best Locations of Client-Jobs Folder are: StarterPlayerScriptsReplicatedFirst "},{"title":"Server Jobs​","type":1,"pageTitle":"Jobs","url":"/Girra-Framework/docs/Jobs#server-jobs","content":""},{"title":"Folder Locations​","type":1,"pageTitle":"Jobs","url":"/Girra-Framework/docs/Jobs#folder-locations","content":"The Best Locations of Server-Jobs Folder are: ServerStorageServerScriptService danger Server Jobs should be always hidden from the client or the source code maybe leaked to exploiters! "},{"title":"Creating Job:​","type":1,"pageTitle":"Jobs","url":"/Girra-Framework/docs/Jobs#creating-job","content":"Creating Job is so easy require Girra Framework and then CreateJob using: .CreateJob() { Name: STRING } "},{"title":"Example:​","type":1,"pageTitle":"Jobs","url":"/Girra-Framework/docs/Jobs#example","content":"--&gt; Game Services: local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) --&gt; Varibles: local Girra = require(ReplicatedStorage.Packages.Girra):GetClient() --&gt; Or GetServer() --&gt; Init: local MyJob = Girra.CreateJob() { Name = &quot;MyJob&quot; } --&gt; Job Functions: function MyJob:OnInit() --&gt; Runs when the Job initallized. used for creating events and properties. end function MyJob:OnStart() --&gt; Safe for getting other Jobs! end function MyJob:OnStep() --&gt; Runs every Step after The Job Initallized end function MyJob:Render() --&gt; Runs every frame after the Job Initallized For Client Only! end return 0; --&gt; you can use return MyJob; 0 means Jobs cant get required externally from other scripts  caution Job Name is necessary! { &quot;MyJob&quot; } "},{"title":"Client-Job Functions:​","type":1,"pageTitle":"Jobs","url":"/Girra-Framework/docs/Jobs#client-job-functions","content":"Client-Jobs contains 4 main functions that can be used but are not necessary: "},{"title":":OnInit()​","type":1,"pageTitle":"Jobs","url":"/Girra-Framework/docs/Jobs#oninit","content":"Runs when the Job first initallized Used for creating events and properties.Not Save for getting any Job! caution Don't get Job on this function! .GetJob( name: STRING ) "},{"title":":OnStart()​","type":1,"pageTitle":"Jobs","url":"/Girra-Framework/docs/Jobs#onstart","content":"Runs when the Job started and ready to goUsed for communicating Job to Job and Client-Job to Server-JobSave for getting Jobs! "},{"title":":OnStep()​","type":1,"pageTitle":"Jobs","url":"/Girra-Framework/docs/Jobs#onstep","content":"Runs every Step: RunService.SteppedUsed for looping "},{"title":":OnRender()​","type":1,"pageTitle":"Jobs","url":"/Girra-Framework/docs/Jobs#onrender","content":"Runs every Frame: RunService.RenderSteppedUsed for looping renders like Camera Loops etc and rendering. Client Only! This function will not be used from Girra if it's on a Server-Job "},{"title":"Job - Job Communication:​","type":1,"pageTitle":"Jobs","url":"/Girra-Framework/docs/Jobs#job---job-communication","content":"Job Communication is too easy simply we will put 2 Jobs example: "},{"title":"Job 1:​","type":1,"pageTitle":"Jobs","url":"/Girra-Framework/docs/Jobs#job-1","content":"--&gt; Init: local Job1 = Girra.CreateJob() { Event = Girra.CreateSignal() Name = &quot;Job1&quot; } --&gt; Job Functions: function Job1:OnInit() Job1.Event:Listen(function() print(&quot;Yay!&quot;, &quot;I got fired by Other Job!&quot;) end) end function Job1:OnStart() local Job2 = Girra.GetJob(&quot;Job2&quot;) Job2:Print(&quot;I Love IceCream!&quot;) end return 0;  "},{"title":"Job 2:​","type":1,"pageTitle":"Jobs","url":"/Girra-Framework/docs/Jobs#job-2","content":"local Job2 = Girra.CreateJob() { Name = &quot;MyJob2&quot; } --&gt; Job Functions: function Job2:Print(...: string) print(&quot;Invoked and Printed:&quot;, ...) end function Job2:OnStart() local Job1 = Girra.GetJob(&quot;Job1&quot;) Job1.Event:Fire() end return 0;  Input Invoked and Printed: I Love IceCream Yay! I got fired by Other Job!  As we can see in this example we created a signal and a function, Job1 Invokes Print() function and Job2 Fires a signal. We got the jobs using Girra.GetJob() and this will remove the intellisense because of the way luau works however you can use require(module) instead and this will fix the intellisense but you need to start the framework with the begin method and instead of creating the job .CreateJob() you just place a normal table with a name and the default functions! "},{"title":"Creating Signal:​","type":1,"pageTitle":"Jobs","url":"/Girra-Framework/docs/Jobs#creating-signal","content":"Girra.CreateSignal()  "},{"title":"Creating function:​","type":1,"pageTitle":"Jobs","url":"/Girra-Framework/docs/Jobs#creating-function","content":"function Job:MyFunction() end  "},{"title":"Networking","type":0,"sectionRef":"#","url":"/Girra-Framework/docs/Networking","content":"","keywords":""},{"title":"Creating & Getting Networks​","type":1,"pageTitle":"Networking","url":"/Girra-Framework/docs/Networking#creating--getting-networks","content":"--&gt; Server-Side local Girra = require(game.ReplicatedStorage.Packages.Girra):GetServer() local MyNetwork = Girra.CreateNetwork(&quot;MyNetwork&quot; --[[ Name ]] )  After that get the network from the client-side of girra framework: local Girra = require(game.ReplicatedStorage.Packages.Girra):GetClient() local MyNetwork = Girra.GetNetwork(&quot;MyNetwork&quot; --[[ Name ]] )  "},{"title":"Network Functions​","type":1,"pageTitle":"Networking","url":"/Girra-Framework/docs/Networking#network-functions","content":"You can see the network functions on the GirraClient, GirraServer Apis. "},{"title":"Usage​","type":1,"pageTitle":"Networking","url":"/Girra-Framework/docs/Networking#usage","content":""},{"title":"Server To Client​","type":1,"pageTitle":"Networking","url":"/Girra-Framework/docs/Networking#server-to-client","content":"--&gt; Server-Side local Girra = require(game.ReplicatedStorage.Packages.Girra):GetServer() local MyNetwork = Girra.CreateNetwork(&quot;MyNetwork&quot;) repeat task.wait() until MyNetwork:IsListening() MyNetwork:FireAll(&quot;Hello From Server!&quot;) --&gt; Fires for All Players MyNetwork:Fire([Player], &quot;Hello From Server for 1 Player&quot;) --&gt; Fires for one player MyNetwork:FireExcept({[Player1, Player2]}, &quot;Hello From Server Except players in table.&quot;) --&gt; Fires for all except the players in the table {} MyNetwork:InvokeAll(function() return 5 end) --&gt; Invokes for all players  local Girra = require(game.ReplicatedStorage.Packages.Girra):GetClient() local MyNetwork = Girra.GetNetwork(&quot;MyNetwork&quot; --[[ Name ]] ) MyNetwork:Listen(function(msg) print(&quot;I Got:&quot;, msg) end) MyNetwork:Once(function() print(&quot; This Connection will die after it gets fired or Invoked&quot; end)  "},{"title":"Client To Server​","type":1,"pageTitle":"Networking","url":"/Girra-Framework/docs/Networking#client-to-server","content":"--&gt; Server-Side local Girra = require(game.ReplicatedStorage.Packages.Girra):GetServer() local MyNetwork = Girra.CreateNetwork(&quot;MyNetwork&quot;) MyNetwork:Listen(function(msg) print(&quot;Server Got:&quot;, msg) end)  local Girra = require(game.ReplicatedStorage.Packages.Girra):GetClient() local MyNetwork = Girra.GetNetwork(&quot;MyNetwork&quot; --[[ Name ]] ) repeat task.wait() until MyNetwork:IsListening() MyNetwork:Fire(&quot;Hello From Client&quot;)  "}]