[{"title":"GirraFramework","type":0,"sectionRef":"#","url":"/Girra-Framework/api/GirraFramework","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"GirraFramework","url":"/Girra-Framework/api/GirraFramework#functions","content":" "},{"title":"GetClient​","type":1,"pageTitle":"GirraFramework","url":"/Girra-Framework/api/GirraFramework#GetClient","content":"This item only works when running on the client. Client &lt;/&gt; GirraFramework:GetClient() → GirraClient local Gira = require(game.ReplicatedStorage.Gira):GetClient()   "},{"title":"GetServer​","type":1,"pageTitle":"GirraFramework","url":"/Girra-Framework/api/GirraFramework#GetServer","content":"This item only works when running on the server. Server &lt;/&gt; GirraFramework:GetServer() → GirraServer local Gira = require(game.ReplicatedStorage.Gira):GetServer()   "},{"title":"GetFrameworkServer​","type":1,"pageTitle":"GirraFramework","url":"/Girra-Framework/api/GirraFramework#GetFrameworkServer","content":"This item only works when running on the server. Server &lt;/&gt; GirraFramework:GetFrameworkServer() → GirraServer Allias for Girra:GetServer()  "},{"title":"GetFrameworkClient​","type":1,"pageTitle":"GirraFramework","url":"/Girra-Framework/api/GirraFramework#GetFrameworkClient","content":"This item only works when running on the client. Client &lt;/&gt; GirraFramework:GetFrameworkClient() → GirraClient Allias for Girra:GetClient() "},{"title":"Client","type":0,"sectionRef":"#","url":"/Girra-Framework/api/Client","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Client","url":"/Girra-Framework/api/Client#functions","content":" "},{"title":"Fire​","type":1,"pageTitle":"Client","url":"/Girra-Framework/api/Client#Fire","content":"&lt;/&gt; Client:Fire(Content: any) → () Fires the network class  "},{"title":"Listen​","type":1,"pageTitle":"Client","url":"/Girra-Framework/api/Client#Listen","content":"&lt;/&gt; Client:Listen(Callback: (Content: any)) → () Listens to a callback  "},{"title":"Once​","type":1,"pageTitle":"Client","url":"/Girra-Framework/api/Client#Once","content":"&lt;/&gt; Client:Once(Callback: (Content: any)) → () Listens once to the callback  "},{"title":"Invoke​","type":1,"pageTitle":"Client","url":"/Girra-Framework/api/Client#Invoke","content":"&lt;/&gt; Client:Invoke(Content: Content: any) → () Invokes to a OnServerInvoke function tip To make a serverinvoke funciton do: ServerIndex.OnServerInvoke = function(content) end)  "},{"title":"Wait​","type":1,"pageTitle":"Client","url":"/Girra-Framework/api/Client#Wait","content":"&lt;/&gt; Client:Wait() → () Waits for the next fire "},{"title":"GirraServer","type":0,"sectionRef":"#","url":"/Girra-Framework/api/GirraServer","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#types","content":" "},{"title":"Debugging​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#Debugging","content":"&lt;/&gt; type Debugging = { InGameDebugging: { JobDebugging: boolean, SignalDebugging: boolean, NetworkDebugging: boolean }, InStudioDebugging: { JobDebugging: boolean, SignalDebugging: boolean, NetworkDebugging: boolean } } Debugging Settings  "},{"title":"Settings​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#Settings","content":"&lt;/&gt; type Settings = {Debugging: Debugging}  Used by Girra.Start() This Type Is used for Girra.Start() Function  "},{"title":"Job​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#Job","content":"&lt;/&gt; interface Job { Name: string OnInit: () → () OnStart: () → () OnStep: (deltaTime: number) → () Heartbeat: (deltaTime: number) → () Fire: (Name: string) → () Hire: (Name: string) → HiredEmployee Employees: {[any]: {Work: ()}} } Class Job of GirraServer Which Is Module.  "},{"title":"HiredEmployee​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#HiredEmployee","content":"&lt;/&gt; interface HiredEmployee { Job: Job Work: () } Class Employee of GirraServer Which Is Module.  "},{"title":"Employee​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#Employee","content":"&lt;/&gt; interface Employee { Name: string, OnWork: (self: any), OnHire: (self: any) } Class Employee of GirraServer Which Is Module.  "},{"title":"Services​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#Services","content":"&lt;/&gt; interface Services { Players: Players UserInputService: UserInputService RunService: RunService ReplicatedStorage: ReplicatedStorage Workspace: Workspace } Type Services of GirraServer Which IsA Table Contains Game-Services. "},{"title":"Properties​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#properties","content":" "},{"title":"Services​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#Services","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; GirraServer.Services: Services Refrence to Used Game Services example: local Girra = require(game.ReplicatedStorage.Girra):GetServer() local Services = Girra.Services --&gt; InputBegan Function: Services.UserInputService.InputBegan:Connect(function() end)   "},{"title":"CplAccess​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#CplAccess","content":"&lt;/&gt; GirraServer.CplAccess: {number} Used to refrence who can access and view serverJobs in ControlPanel by opening it ( Control + G ) "},{"title":"Functions​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#functions","content":" "},{"title":"Start​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#Start","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; GirraServer.Start(GameLocation: Instance ) → () → (Settings) Starts Girra on the Server-Side! local Girra = require(game.ReplicatedStorage.Girra):GetServer() Girra.Start(0) { Debugging = { InGameDebugging = { SignalDebugging = false } InStudioDebugging = { SignalDebugging = true } } } --&gt; 0 Means default GameLocation Location which is playerscripts   "},{"title":"OnStart​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#OnStart","content":"&lt;/&gt; GirraServer.OnStart(callback: (T...) → ()) → RBXScriptConnection  Returns an RBXScriptConnection. local Girra = require(game.ReplicatedStorage.Girra):GetServer() Girra.OnStart(function() print(&quot;Started!&quot;) end) Runs when Girra Framework Starts on Server! caution This function should be on top of .Start() function  "},{"title":"GetJob​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#GetJob","content":"&lt;/&gt; GirraServer.GetJob(Name: string) → Job Gets a Job From the Jobs Folder. local Girra = require(game.ReplicatedStorage.Girra):GetServer() Girra.GetJob(&quot;MyJob&quot;):DoSomething()   "},{"title":"CreateSignal​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#CreateSignal","content":"&lt;/&gt; GirraServer.CreateSignal(Name: string) → Signal Creates a Signal that can be used to intract with Job to Job local Girra = require(game.ReplicatedStorage.Girra):GetServer() local Job = {} --&gt; Example Job.Signal = Girra.CreateSignal() Job.Signal:Fire(&quot;Hello Other Job!&quot;) Debugging Currently Debugging will not work in Signal we will work on updates to make signal debugging  "},{"title":"GetSignal​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#GetSignal","content":"&lt;/&gt; GirraServer.GetSignal(Name: string) → Signal? Gets a Signal that is refrenced by Name local Girra = require(game.ReplicatedStorage.Girra):GetServer() local Job = {} --&gt; Example Signal = Girra.GetSignal(&quot;MySignal&quot;) Signal:Listen(function(Msg) print(&quot;Got A Message:&quot;, Msg) end)   "},{"title":"CreateNetwork​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#CreateNetwork","content":"&lt;/&gt; GirraServer.CreateNetwork( Name: string, AutoIdentifier: boolean? ) → Network Creates a network that communicate between Server-Job and Client-Job local Girra = require(game.ReplicatedStorage.Girra):GetServer() local Network = Girra.CreateNetwork(&quot;MyNetwork&quot;) Network:Fire([Player], &quot;Hello From Server-Job!&quot;)   "},{"title":"CreateJob​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#CreateJob","content":"&lt;/&gt; GirraServer.CreateJob() → (Job) → () Creates Job local Girra = require(game.ReplicatedStorage.Girra):GetServer() local MyJob = Girra.CreateJob() { Name = &quot;MyJob&quot; } requiring() You can create an empty table as a module and then return it and use the CreateJob function putting inside the callback the function local Girra = require(game.ReplicatedStorage.Girra):GetServer() local MyJob = { Name = &quot;MyJob&quot; } Girra.CreateJob() (MyJob) return MyJob --&gt; Can get required and used without .GetJob require(MyJob):DoSomething()   "},{"title":"CreateEmployee​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#CreateEmployee","content":"&lt;/&gt; GirraServer.CreateEmployee() → (Employee) → () Creates Employee local Girra = require(game.ReplicatedStorage.Girra):GetServer() local MyEmployee = Girra.CreateEmployee() ({ Name = &quot;MyEmployee&quot; })  "},{"title":"Network","type":0,"sectionRef":"#","url":"/Girra-Framework/api/Network","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Network","url":"/Girra-Framework/api/Network#functions","content":" "},{"title":"ReferenceIdentifier​","type":1,"pageTitle":"Network","url":"/Girra-Framework/api/Network#ReferenceIdentifier","content":"&lt;/&gt; Network.ReferenceIdentifier(Name: string) → Identifier Returns an Identifier.  "},{"title":"Server​","type":1,"pageTitle":"Network","url":"/Girra-Framework/api/Network#Server","content":"&lt;/&gt; Network.Server( Name: string, AutoIdentifier: boolean ) → ServerIndex Returns a server network class.  "},{"title":"Client​","type":1,"pageTitle":"Network","url":"/Girra-Framework/api/Network#Client","content":"&lt;/&gt; Network.Client( Name: string, AutoIdentifier: boolean ) → ClientIndex Returns a client network class. "},{"title":"GirraClient","type":0,"sectionRef":"#","url":"/Girra-Framework/api/GirraClient","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#types","content":" "},{"title":"Debugging​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#Debugging","content":"&lt;/&gt; type Debugging = { InGameDebugging: { JobDebugging: boolean, SignalDebugging: boolean, NetworkDebugging: boolean }, InStudioDebugging: { JobDebugging: boolean, SignalDebugging: boolean, NetworkDebugging: boolean } } Debugging Settings  "},{"title":"Settings​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#Settings","content":"&lt;/&gt; type Settings = {Debugging: Debugging}  Used by Girra.Start() This Type Is used for Girra.Start() Function  "},{"title":"Job​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#Job","content":"&lt;/&gt; interface Job { Name: string OnInit: () → () OnStart: () → () OnStep: (deltaTime: number) → () Heartbeat: (deltaTime: number) → () OnRender: (deltaTime: number) → () Fire: (Name: string) → () Hire: (Name: string) → HiredEmployee, } Class Job of GirraClient Which Is Module.  "},{"title":"HiredEmployee​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#HiredEmployee","content":"&lt;/&gt; interface HiredEmployee { Job: Job Work: () } Class Employee of GirraClient Which Is Module.  "},{"title":"Employee​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#Employee","content":"&lt;/&gt; interface Employee { Name: string OnWork: (self: any) OnHire: (self: any) } Class Employee of GirraClient Which Is Module.  "},{"title":"Services​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#Services","content":"&lt;/&gt; interface Services { Players: Players UserInputService: UserInputService RunService: RunService ReplicatedStorage: ReplicatedStorage Workspace: Workspace } Type Services of GirraClient Which IsA Table Contains Game-Services. "},{"title":"Properties​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#properties","content":" "},{"title":"Services​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#Services","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; GirraClient.Services: Services Refrence to Used Game Services example: local Girra = require(game.ReplicatedStorage.Girra):GetClient() local Services = Girra.Services --&gt; InputBegan Function: Services.UserInputService.InputBegan:Connect(function() end)   "},{"title":"Client​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#Client","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; GirraClient.Client: Player  Refrence to Players.LocalPlayer local Girra = require(game.ReplicatedStorage.Girra):GetClient() print(Girra.Client.Name) --&gt; Prints Player Name   "},{"title":"Gui​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#Gui","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; GirraClient.Gui: PlayerGui  Refrence to Client.PlayerGui local Girra = require(game.ReplicatedStorage.Girra):GetClient() print(Girra.Gui.Name) --&gt; Prints PlayerGui  "},{"title":"Functions​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#functions","content":" "},{"title":"Start​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#Start","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; GirraClient.Start(GameLocation: Instance ) → () → (Settings) Starts Girra on the Client-Side! local Girra = require(game.ReplicatedStorage.Girra):GetClient() Girra.Start(0) { Debugging = { InGameDebugging = { SignalDebugging = false } InStudioDebugging = { SignalDebugging = true } } } --[[ 0 Is just an example make sure you have a folder in StarterPlayerScripts or PlayerScripts or ReplicatedFirst and has these children: { Employees: Folder, Jobs: Folder, Runtime: Script } ]]   "},{"title":"OnStart​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#OnStart","content":"&lt;/&gt; GirraClient.OnStart(Callback: (T...) → ()) → RBXScriptConnection  Returns an RBXScriptConnection. local Girra = require(game.ReplicatedStorage.Girra):GetClient() Girra.OnStart(function() print(&quot;Started!&quot;) end) Fires when Girra Framework Starts on Client! caution This function should be on top of and before .Start() function runs  "},{"title":"GetJob​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#GetJob","content":"&lt;/&gt; GirraClient.GetJob(Name: string) → Job Gets a Job From the Jobs Folder. local Girra = require(game.ReplicatedStorage.Girra):GetClient() Girra.GetJob(&quot;MyJob&quot;):DoSomething()   "},{"title":"CreateSignal​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#CreateSignal","content":"&lt;/&gt; GirraClient.CreateSignal(Name: string?) → Signal Creates a Signal that can be used to intract with scripts and modules Signals can be refrenced by string and thats (Recommended) for Jobs and just easier to navigate Also it can be used for Classes and that way you don't need to refrence a name here's an example: Non Refrenced Signal Object: local Girra = require(game.ReplicatedStorage.Girra):GetClient() local Job = {} --&gt; Example Job.Signal = Girra.CreateSignal() Job.Signal:Fire(&quot;Hello Other Job!&quot;) Refrenced Signal Object: local Girra = require(game.ReplicatedStorage.Girra):GetClient() local Job = {} --&gt; Example Signal = Girra.CreateSignal(&quot;MySignal&quot;) Signal:Fire(&quot;Hello Other Job!&quot;) Debugging Currently Debugging will not work in Signal we will work on updates to make signal debugging  "},{"title":"GetSignal​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#GetSignal","content":"&lt;/&gt; GirraClient.GetSignal(Name: string) → Signal? Gets a Signal that is refrenced by Name local Girra = require(game.ReplicatedStorage.Girra):GetClient() local Job = {} --&gt; Example Signal = Girra.GetSignal(&quot;MySignal&quot;) Signal:Listen(function(Msg) print(&quot;Got A Message:&quot;, Msg) end)   "},{"title":"GetNetwork​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#GetNetwork","content":"&lt;/&gt; GirraClient.GetNetwork( Name: string, AutoIdentifier: boolean? ) → Network? Gets a network that's created in server-side local Girra = require(game.ReplicatedStorage.Girra):GetClient() local Network = Girra.GetNetwork(&quot;MyNetwork&quot;) Network:Fire(&quot;Hello From Client-Job!&quot;)   "},{"title":"CreateJob​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#CreateJob","content":"&lt;/&gt; GirraClient.CreateJob() → (Job) → Job Creates a Job local Girra = require(game.ReplicatedStorage.Girra):GetClient() local MyJob = Girra.CreateJob() { Name = &quot;MyJob&quot; } requiring() You can create an empty table as a module and then return it and use the CreateJob function putting inside the callback the function local Girra = require(game.ReplicatedStorage.Girra):GetClient() local MyJob = { Name = &quot;MyJob&quot; } Girra.CreateJob() (MyJob) return MyJob --&gt; Can get required and used without .GetJob require(MyJob):DoSomething()   "},{"title":"CreateEmployee​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#CreateEmployee","content":"&lt;/&gt; GirraClient.CreateEmployee() → (Employee) → () Creates AN Employee class local Girra = require(game.ReplicatedStorage.Girra):GetClient() local MyEmployee = Girra.CreateEmployee() ({ Name = &quot;MyEmployee&quot; }) There's no need to external require as this uses default functions: OnHire(), OnWork() "},{"title":"Signal","type":0,"sectionRef":"#","url":"/Girra-Framework/api/Signal","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Signal","url":"/Girra-Framework/api/Signal#functions","content":" "},{"title":"Fire​","type":1,"pageTitle":"Signal","url":"/Girra-Framework/api/Signal#Fire","content":"&lt;/&gt; Signal:Fire(Content: any) → () Fires Signal Class  "},{"title":"FireTuple​","type":1,"pageTitle":"Signal","url":"/Girra-Framework/api/Signal#FireTuple","content":"&lt;/&gt; Signal:FireTuple(...: any) → () Fires signal Class but with tuples not tables  "},{"title":"DisconnectAll​","type":1,"pageTitle":"Signal","url":"/Girra-Framework/api/Signal#DisconnectAll","content":"&lt;/&gt; Signal:DisconnectAll() → () Destroys and disconnects signal Class  "},{"title":"Listen​","type":1,"pageTitle":"Signal","url":"/Girra-Framework/api/Signal#Listen","content":"&lt;/&gt; Signal:Listen(Callback: ( Content: any, ...any ) → ()) → () Listens to a function callback  "},{"title":"ListenOnce​","type":1,"pageTitle":"Signal","url":"/Girra-Framework/api/Signal#ListenOnce","content":"&lt;/&gt; Signal:ListenOnce(Callback: (Content: any) → ()) → () Listens to a function callback andThen disconnects "},{"title":"Server","type":0,"sectionRef":"#","url":"/Girra-Framework/api/Server","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Server","url":"/Girra-Framework/api/Server#functions","content":" "},{"title":"Fire​","type":1,"pageTitle":"Server","url":"/Girra-Framework/api/Server#Fire","content":"&lt;/&gt; Server:Fire( Player: Player | {Player }, Content: any ) → () Fires the network class  "},{"title":"FireAll​","type":1,"pageTitle":"Server","url":"/Girra-Framework/api/Server#FireAll","content":"&lt;/&gt; Server:FireAll(Content: any) → () Fires the network class to all players  "},{"title":"FireExcept​","type":1,"pageTitle":"Server","url":"/Girra-Framework/api/Server#FireExcept","content":"&lt;/&gt; Server:FireExcept( Players: {Player }, Content: any ) → () Fires the network class to players except the ones in the table  "},{"title":"Wait​","type":1,"pageTitle":"Server","url":"/Girra-Framework/api/Server#Wait","content":"&lt;/&gt; Server:Wait() → () Waits for the next fire  "},{"title":"Listen​","type":1,"pageTitle":"Server","url":"/Girra-Framework/api/Server#Listen","content":"&lt;/&gt; Server:Listen(Callback: (Content: any)) → () Listens to a callback  "},{"title":"Once​","type":1,"pageTitle":"Server","url":"/Girra-Framework/api/Server#Once","content":"&lt;/&gt; Server:Once(Callback: (Content: any)) → () Listens once to the callback "},{"title":"Debugger","type":0,"sectionRef":"#","url":"/Girra-Framework/docs/Debugging","content":"","keywords":""},{"title":"Customization​","type":1,"pageTitle":"Debugger","url":"/Girra-Framework/docs/Debugging#customization","content":"When Starting Girra it gives you an options to start it most of them related to Debugging and they are: JobDebugging: Runs when a job initallized and required SignalDebugging: Runs when a signal is created or when a signal is fired or when a signal disconnected NetworkDebugging: Same as SignalDebugging but for Network OutputDebugging: Things that Developer Debugs and used the girra's framework Debugger Debugging has cut to two the first one is InGameDebugging and the second is InStudioDebugging InGameDebugging Debugs things inside real-time game while InStudioDebugging Debug things inside studio. Girra.Start(ServerScriptService) ({ Debugging = { InGameDebugging = { SignalDebugging = true, NetworkDebugging = true, JobDebugging = false, OutputDebugging = false, } InStudioDebugging = { SignalDebugging = true, NetworkDebugging = true, JobDebugging = true, OutputDebugging = true, } } })  "},{"title":"Debugging​","type":1,"pageTitle":"Debugger","url":"/Girra-Framework/docs/Debugging#debugging","content":"Debugging is very simple use the Debugger.Debug() function and that will debug make sure to enable debugging via OutputDebugging Configuration. local Debugger = Girra.Libs.Debugger Debugger.Debug(warn, &quot;Log&quot;, &quot;An error occurred&quot;)  "},{"title":"Installation","type":0,"sectionRef":"#","url":"/Girra-Framework/docs/Installation","content":"","keywords":""},{"title":"Roblox Studio​","type":1,"pageTitle":"Installation","url":"/Girra-Framework/docs/Installation#roblox-studio","content":"Download Girra Framework rbxm from the github repository releases page "},{"title":"Rojo & Wally​","type":1,"pageTitle":"Installation","url":"/Girra-Framework/docs/Installation#rojo--wally","content":"Add Girra to your dependencies replace @latest with the latest girra release from github repository. wally.toml [dependencies] Girra = &quot;cubiedays/girra@latest&quot;  "},{"title":"About","type":0,"sectionRef":"#","url":"/Girra-Framework/docs/intro","content":"","keywords":""},{"title":"Features​","type":1,"pageTitle":"About","url":"/Girra-Framework/docs/intro#features","content":"Fast and lightweightEasy-to-use code structureEliminates the need to use remote events and BindableEventsSimplifies the process of organizing your project "},{"title":"Usage​","type":1,"pageTitle":"About","url":"/Girra-Framework/docs/intro#usage","content":"To use Girra Framework, follow these steps: Install and Require the Girra Framework module.Use the framework's Jobs, classes, Dependencies, and functions to create a well-structured project that is easy to navigate. "},{"title":"Conclusion​","type":1,"pageTitle":"About","url":"/Girra-Framework/docs/intro#conclusion","content":"Girra Framework is a great choice for anyone looking to simplify the process of organizing their Roblox Studio project. With its easy-to-use code structure and fast performance, you can focus on creating your game without worrying about the underlying architecture. "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/Girra-Framework/docs/Getting Started","content":"","keywords":""},{"title":"Starting Framework​","type":1,"pageTitle":"Getting Started","url":"/Girra-Framework/docs/Getting Started#starting-framework","content":"Starting Girra Framework in client and server are the same Girra Client and Server have .Start() function which starts the framework althought using it like this Girra.Start() with nothing inside will not do anything you need to setup girra configurations and booleans you can see it in the api or in the debug page whoever you should add a location to your source folder too so it's like Girra.Start(SourceFolder: Instance) Girra.Start(ServerScriptService) ({ Debugging = { InGameDebugging = { SignalDebugging = true, NetworkDebugging = true, JobDebugging = false, OutputDebugging = false, } InStudioDebugging = { SignalDebugging = true, NetworkDebugging = true, JobDebugging = true, OutputDebugging = true, } } })  Horray!! we started our framework! However SourceFolder Should contain various of things. And they are: Jobs Folder​ Employees Folder​ What Jobs? Jobs are things the game is focused on like DataJob or MinigameJob etc. Why Jobs? Simply our country dosen't have alot of jobs and its hard for you to get hired inthere so I just named my structure as Jobs and Employees why not? What Employees? Employees Used by jobs that can do not more than one operation they are used in heartbeats and steps alot but you can use them in sync or any ways and they simplify for you reading jobs "},{"title":"Jobs In General​","type":1,"pageTitle":"Getting Started","url":"/Girra-Framework/docs/Getting Started#jobs-in-general","content":"Jobs shouldn't be alot because they are the core things of the game and you create them For necessity like if you started your game and you need to create a data for the player you create A dataJob that stores and handles data you mustn't spam Jobs and place alot of methods instead you can create a 2 jobs that classes can use or employees that the 2 jobs can use. "},{"title":"Creating Job​","type":1,"pageTitle":"Getting Started","url":"/Girra-Framework/docs/Getting Started#creating-job","content":"To create job you use the Girra.CreateJob() (table: {any}) and place some default and custom methods and properties for properties you must put a name for the job in the table for the methods you can use OnInit for initallizing job and OnStart for Starting job and u can use onstep for loops or onheart for loops but for heartbeat and if you are on client u can use OnRender which all have argument of DeltaTime. local Job = Girra.CreateJob() ({ Name = &quot;MyJob&quot; }) return Job  Althought this way is not great and bad for intellisense you can use a better and easy trick to get intellisense local Job = { Name = &quot;MyJob&quot; } Girra.CreateJob() (Job) return Job  Now! this can work with require() and give intellisense! For functions we can put them like this: local Job = { Name = &quot;MyJob&quot; } function Job:OnInit() --&gt; Runs when job initallizes Job.Hire(&quot;MyEmploy&quot;) end function Job:OnStart() --&gt; Runs when job starts Job.Employees.MyEmploy.Work() end function Job:OnStep(DeltaTime: number) --&gt; Runs every step print(DeltaTime) end function Job:OnHeart(DeltaTime: number) --&gt; Runs every heartbeat print(DeltaTime) end function Job:OnRender(DeltaTime: number) --&gt; Runs every RenderStep print(DeltaTime, &quot;Client Only&quot;) end Girra.CreateJob() (Job) return Job  Great now we put methods and describe them now lets go into Employees. "},{"title":"Employees in General​","type":1,"pageTitle":"Getting Started","url":"/Girra-Framework/docs/Getting Started#employees-in-general","content":"Employees, Employees follows jobs they can't do anything with out jobs, you can describe jobs and employees as high classes an employee should get hired from a job and then the job can make him work with .Work() currently Employees arent ready for real use or its rare to find a usecase for them but, we plan for updates on them like giving employees taskes to work on them or something like that "},{"title":"Creating Employees​","type":1,"pageTitle":"Getting Started","url":"/Girra-Framework/docs/Getting Started#creating-employees","content":"Same as creating job but this time you don't need to use intellisense way since Employees have only 2 functions and they are OnHire() and OnWork() local Employee = Girra.CreateEmployee() ({ Name = &quot;MyJob&quot; }) function Employee:OnWork() print(&quot;I am working!&quot;) end function Employee:OnHire() print(&quot;I Got Hired!&quot;) end return Employee  "},{"title":"In Job-side​","type":1,"pageTitle":"Getting Started","url":"/Girra-Framework/docs/Getting Started#in-job-side","content":"Hiring and Firing in Job-Side to Hire an employee you simply do Job.Hire(EmployName) and to fire an employee and remove it you do Job.Fire(EmployName). local Job = { Name = &quot;MyJob&quot; } function Job:OnInit() --&gt; Runs when job initallizes Job.Hire(&quot;MyEmploy&quot;) --&gt; Hiring employe end function Job:OnStart() --&gt; Runs when job starts Job.Employees.MyEmploy.Work() --&gt; First way task.wait(5) Job.Fire(&quot;MyEmploy&quot;) end function Job:OnStep(DeltaTime: number) --&gt; Runs every step print(DeltaTime) end Girra.CreateJob() (Job) return Job  Horray, this is the first way to get a job and hire it but the second one is easier. local Job = { Name = &quot;MyJob&quot; } local Employees = { } function Job:OnInit() --&gt; Runs when job initallizes Employees.MyEmployee = Job.Hire(&quot;MyEmploy&quot;) --&gt; Hiring employe end function Job:OnStart() --&gt; Runs when job starts Employees.MyEmployee.Work() --&gt; First way task.wait(5) Job.Fire(&quot;MyEmploy&quot;) end function Job:OnStep(DeltaTime: number) --&gt; Runs every step print(DeltaTime) end Girra.CreateJob() (Job) return Job  "},{"title":"Networking","type":0,"sectionRef":"#","url":"/Girra-Framework/docs/Networking","content":"","keywords":""},{"title":"Creating a Network​","type":1,"pageTitle":"Networking","url":"/Girra-Framework/docs/Networking#creating-a-network","content":"To create a network simply you use Girra.CreateNetwork(Name: string) on Server after that you notice it returns a table with some methods like Fire and Listen etc. local MyNetwork = Girra.CreateNetwork(&quot;MyNetwork&quot;)  "},{"title":"Getting a Network​","type":1,"pageTitle":"Networking","url":"/Girra-Framework/docs/Networking#getting-a-network","content":"Getting network is simple but you should becarful and make sure that networks has been created successfully in the server. You use Girra.GetNetwork(Name: string) on Client which returns a table with some methods or nil value if it didn't find a Network local MyNetwork = Girra.GetNetwork(&quot;MyNetwork&quot;)  "},{"title":"Transfering Data From Client to Server ( Client Firing )​","type":1,"pageTitle":"Networking","url":"/Girra-Framework/docs/Networking#transfering-data-from-client-to-server--client-firing-","content":"To Transfer Data you need to GetNetwork and Use Network:Fire(Data: any | {any}) to Transfer Data but before that make sure the network is listening to any callback function. local MyNetwork = Girra.GetNetwork(&quot;MyNetwork&quot;) MyNetwork:Fire({Data})  "},{"title":"Transfering Data From Server to Client ( Client Firing )​","type":1,"pageTitle":"Networking","url":"/Girra-Framework/docs/Networking#transfering-data-from-server-to-client--client-firing-","content":"Transfering Data From Server to Client cuts to 3 the first one is Fire(Player, Data) the second is FireAll(Data) and the last is FireExcept(Players: {Player}, Data) local MyNetwork = Girra.CreateNetwork(&quot;MyNetwork&quot;) MyNetwork:Fire(Player, {Data}) MyNetwork:FireAll({Data}) MyNetwork:FireExcept({Player1, Player2}, {Data})  "},{"title":"Receiving Data From Client To Server​","type":1,"pageTitle":"Networking","url":"/Girra-Framework/docs/Networking#receiving-data-from-client-to-server","content":"Althought you shouldn't worry about data races because girra handles them, but you should be careful that the Network Listens to callback before any Data Transfer happens! local MyNetwork = Girra.GetNetwork(&quot;MyNetwork&quot;) MyNetwork:Listen(function(Content) print(Content) end)  "},{"title":"Receiving Data From Server To Client​","type":1,"pageTitle":"Networking","url":"/Girra-Framework/docs/Networking#receiving-data-from-server-to-client","content":"Same as client but for server and you need to listen before any Data Transfer or firing method. local MyNetwork = Girra.CreateNetwork(&quot;MyNetwork&quot;) MyNetwork:Listen(function(Content) print(Content) end)  "},{"title":"Signals","type":0,"sectionRef":"#","url":"/Girra-Framework/docs/Signals","content":"","keywords":""},{"title":"Transfering Data ( Firing )​","type":1,"pageTitle":"Signals","url":"/Girra-Framework/docs/Signals#transfering-data--firing-","content":"To transfer data first we need to create our signal but before that we should introduce you refrencedSignal and UnrefrencedSignal. "},{"title":"Refrenced Signal​","type":1,"pageTitle":"Signals","url":"/Girra-Framework/docs/Signals#refrenced-signal","content":"A refrenced signal is a signal that you can use by name and get it by name creating it is by using the girra's .CreateSignal(Name: string?) expect that you put a name in the arg1 as it's not required not putting a name will create an unRefrencedSignal. local RefrencedSignal = Girra.CreateSignal(&quot;RefrencedSignal&quot;)  "},{"title":"unRefrencedSignal​","type":1,"pageTitle":"Signals","url":"/Girra-Framework/docs/Signals#unrefrencedsignal","content":"An unRefrencedSignal is a signal that does not have a name and should be stored somewhere to get it Creating an unRefrencedSignal is simple use the girra's .CreateSignal(Name: string?) expect the opposite from RefrencedSignal you don't put anything on arg1 or nil. local RefrencedSignal = Girra.CreateSignal(&quot;RefrencedSignal&quot;)  And Then you can get it from other scripts by girra's .GetSignal(Name: string) local RefrencedSignal = Girra.GetSignal(&quot;RefrencedSignal&quot;)  "},{"title":"Why Refrenced and UnRefrenced?​","type":1,"pageTitle":"Signals","url":"/Girra-Framework/docs/Signals#why-refrenced-and-unrefrenced","content":"When you are trying to get a signal by the fastest way without getting it from a stored table you use strings and thats always the better but what's about UnRefrenced? unrefrencedSignal is always used for ( Classes ) and should only be like if you are making a car a good developer should know that classes will make his development easier and use Classes but alot of developers use methods for classes only if you look at roblox's part instance you should know it's in scripting is just a table that stores properties, Childerens but Part instance have: Methods, Properties, RBXScriptSignals making a car class with signals will make you comfortable and looks like you created a custom instance that's cool with properties and methods and Signals. "},{"title":"Transfering Data ( Firing )​","type":1,"pageTitle":"Signals","url":"/Girra-Framework/docs/Signals#transfering-data--firing--1","content":"To transfer data you need to CreateSignal and then use the :Fire(Content: any | { any }) Method. With your data in content which is 1 argument and not a tuple if you want to send multiple data use Table. local Girra = require(&quot;Path.To.Girra&quot;) local Signal = Girra.CreateSignal() Signal:Fire(&quot;Hello World!&quot;) Signal:Fire({ &quot;This is my data&quot; })  "},{"title":"Receiving Data ( Listening )​","type":1,"pageTitle":"Signals","url":"/Girra-Framework/docs/Signals#receiving-data--listening-","content":"To recieve data you need to GetSignal or Create then use the :Listen(Callback: (Content: any | {any})) local Girra = require(&quot;Path.To.Girra&quot;) local Signal = Girra.CreateSignal() Signal:Listen(function(Content: {any} | any) print(Content) end)  "},{"title":"Transfering on creator script​","type":1,"pageTitle":"Signals","url":"/Girra-Framework/docs/Signals#transfering-on-creator-script","content":"Transfering on creator script means creating a signal and transfering data in the same script before doing that you should listen as if you fire before listening data will not send to the listened callback function so you do these instructions: Create SignalWait for ListeningTransfer Data "},{"title":"Receiving on creator script​","type":1,"pageTitle":"Signals","url":"/Girra-Framework/docs/Signals#receiving-on-creator-script","content":"You shouldn't worry on Receiving on creatorscript but you should becareful on waiting a bit of time and listen after couple of seconds after creating signal as if the other scripts fire data it will not recieve so you do these instructions: Create SignalListen Immediately "}]