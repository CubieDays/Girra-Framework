"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[260],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>p});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function g(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var u=r.createContext({}),l=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=l(e.components);return r.createElement(u.Provider,{value:n},e.children)},c="mdxType",b={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,u=e.parentName,s=g(e,["components","mdxType","originalType","parentName"]),c=l(t),d=i,p=c["".concat(u,".").concat(d)]||c[d]||b[d]||a;return t?r.createElement(p,o(o({ref:n},s),{},{components:t})):r.createElement(p,o({ref:n},s))}));function p(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=d;var g={};for(var u in n)hasOwnProperty.call(n,u)&&(g[u]=n[u]);g.originalType=e,g[c]="string"==typeof e?e:i,o[1]=g;for(var l=2;l<a;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},63957:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>b,frontMatter:()=>a,metadata:()=>g,toc:()=>l});var r=t(87462),i=(t(67294),t(3905));const a={sidebar_position:6},o=void 0,g={unversionedId:"Debugging",id:"Debugging",title:"Debugging",description:"Here is the fixed version of your markdown file:",source:"@site/docs/Debugging.md",sourceDirName:".",slug:"/Debugging",permalink:"/Girra-Framework/docs/Debugging",draft:!1,editUrl:"https://github.com/CubieDays/Girra-Framework/edit/main/docs/Debugging.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"defaultSidebar",previous:{title:"Networking",permalink:"/Girra-Framework/docs/Networking"}},u={},l=[{value:"Customization",id:"customization",level:2},{value:"Debugging",id:"debugging",level:2}],s={toc:l},c="wrapper";function b(e){let{components:n,...t}=e;return(0,i.kt)(c,(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Here is the fixed version of your markdown file:"),(0,i.kt)("h1",{id:"debugger"},"Debugger"),(0,i.kt)("p",null,"Debugging in the Girra framework is very easy and effective. It allows you to monitor your game and see errors, logs, and warnings. You can delete a log or delete all logs, and send a log or warning. You can also see all logs in a table."),(0,i.kt)("h2",{id:"customization"},"Customization"),(0,i.kt)("p",null,"When starting Girra, it gives you options to start it, most of which are related to debugging. They are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"JobDebugging: Runs when a job is initialized and required."),(0,i.kt)("li",{parentName:"ul"},"SignalDebugging: Runs when a signal is created, fired, or disconnected."),(0,i.kt)("li",{parentName:"ul"},"NetworkDebugging: Same as SignalDebugging but for network."),(0,i.kt)("li",{parentName:"ul"},"OutputDebugging: Things that developers debug and use the Girra\u2019s framework Debugger.")),(0,i.kt)("p",null,"Debugging has two modes: InGameDebugging and InStudioDebugging. InGameDebugging debugs things inside real-time games, while InStudioDebugging debugs things inside the studio."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"Girra.Start(ServerScriptService) ({\n    Debugging = {\n        InGameDebugging = {\n            SignalDebugging = true,\n            NetworkDebugging = true,\n            JobDebugging = false,\n            OutputDebugging = false,\n        },\n        InStudioDebugging = {\n            SignalDebugging = true,\n            NetworkDebugging = true,\n            JobDebugging = true,\n            OutputDebugging = true,\n        }\n    }\n})\n")),(0,i.kt)("h2",{id:"debugging"},"Debugging"),(0,i.kt)("p",null,"Debugging is very simple. Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Debugger.Debug()")," function, and that will debug. Make sure to enable debugging via the ",(0,i.kt)("inlineCode",{parentName:"p"},"OutputDebugging")," configuration."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local Debugger = Girra.Libs.Debugger\nDebugger.Debug(warn, "Log", "An error occurred")\n')),(0,i.kt)("p",null,"I hope this helps! Let me know if you have any other questions."))}b.isMDXComponent=!0}}]);