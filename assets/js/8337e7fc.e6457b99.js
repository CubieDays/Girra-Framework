"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[249],{3905:(e,r,t)=>{t.d(r,{Zo:()=>u,kt:()=>m});var n=t(67294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=n.createContext({}),s=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},u=function(e){var r=s(e.components);return n.createElement(c.Provider,{value:r},e.children)},p="mdxType",k={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},g=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(t),g=a,m=p["".concat(c,".").concat(g)]||p[g]||k[g]||o;return t?n.createElement(m,i(i({ref:r},u),{},{components:t})):n.createElement(m,i({ref:r},u))}));function m(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=g;var l={};for(var c in r)hasOwnProperty.call(r,c)&&(l[c]=r[c]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}g.displayName="MDXCreateElement"},68818:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>k,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=t(87462),a=(t(67294),t(3905));const o={sidebar_position:5},i="Networking",l={unversionedId:"Networking",id:"Networking",title:"Networking",description:"Girra Framework uses custom networking Library called: FastNet2",source:"@site/docs/Networking.md",sourceDirName:".",slug:"/Networking",permalink:"/Girra-Framework/docs/Networking",draft:!1,editUrl:"https://github.com/CubieDays/Girra-Framework/edit/main/docs/Networking.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"defaultSidebar",previous:{title:"Starting Framework",permalink:"/Girra-Framework/docs/Client/Starting Framework"},next:{title:"Employes",permalink:"/Girra-Framework/docs/Employes"}},c={},s=[{value:"Creating &amp; Getting Networks",id:"creating--getting-networks",level:2},{value:"Network Functions",id:"network-functions",level:2},{value:"Usage",id:"usage",level:2},{value:"Server To Client",id:"server-to-client",level:3},{value:"Client To Server",id:"client-to-server",level:3}],u={toc:s},p="wrapper";function k(e){let{components:r,...t}=e;return(0,a.kt)(p,(0,n.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"networking"},"Networking"),(0,a.kt)("p",null,"Girra Framework uses custom networking Library called: FastNet2\nCreating networks and networking is so easy firstly create a Network ( from the server )"),(0,a.kt)("h2",{id:"creating--getting-networks"},"Creating & Getting Networks"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'--\x3e Server-Side\nlocal Girra = require(game.ReplicatedStorage.Packages.Girra):GetServer()\n\nlocal MyNetwork = Girra.CreateNetwork("MyNetwork" --[[ Name ]] )\n')),(0,a.kt)("p",null,"After that get the network from the client-side of girra framework:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local Girra = require(game.ReplicatedStorage.Packages.Girra):GetClient()\n\nlocal MyNetwork = Girra.GetNetwork("MyNetwork" --[[ Name ]] )\n')),(0,a.kt)("h2",{id:"network-functions"},"Network Functions"),(0,a.kt)("p",null,"You can see the network functions on the GirraClient, GirraServer Apis."),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("h3",{id:"server-to-client"},"Server To Client"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'--\x3e Server-Side\nlocal Girra = require(game.ReplicatedStorage.Packages.Girra):GetServer()\n\nlocal MyNetwork = Girra.CreateNetwork("MyNetwork")\n\nrepeat task.wait()\n\nuntil MyNetwork:IsListening()\n\nMyNetwork:FireAll("Hello From Server!") --\x3e Fires for All Players\nMyNetwork:Fire([Player], "Hello From Server for 1 Player") --\x3e Fires for one player\nMyNetwork:FireExcept({[Player1, Player2]}, "Hello From Server Except players  in table.") --\x3e Fires for all except the players in the table {}\nMyNetwork:InvokeAll(function()\n    return 5\nend) --\x3e Invokes for all players\n\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local Girra = require(game.ReplicatedStorage.Packages.Girra):GetClient()\n\nlocal MyNetwork = Girra.GetNetwork("MyNetwork" --[[ Name ]] )\n\nMyNetwork:Listen(function(msg)\n    print("I Got:", msg)\nend)\n\nMyNetwork:Once(function()\n    print(" This Connection will die after it gets fired  or Invoked"\nend)\n')),(0,a.kt)("h3",{id:"client-to-server"},"Client To Server"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'--\x3e Server-Side\nlocal Girra = require(game.ReplicatedStorage.Packages.Girra):GetServer()\n\nlocal MyNetwork = Girra.CreateNetwork("MyNetwork")\n\nMyNetwork:Listen(function(msg)\n    print("Server Got:", msg)\nend)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local Girra = require(game.ReplicatedStorage.Packages.Girra):GetClient()\n\nlocal MyNetwork = Girra.GetNetwork("MyNetwork" --[[ Name ]] )\n\nrepeat task.wait()\n\nuntil MyNetwork:IsListening()\n\nMyNetwork:Fire("Hello From Client")\n')))}k.isMDXComponent=!0}}]);