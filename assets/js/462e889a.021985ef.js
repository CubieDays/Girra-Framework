"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[421],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},y=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=s(t),y=o,d=m["".concat(p,".").concat(y)]||m[y]||u[y]||a;return t?r.createElement(d,l(l({ref:n},c),{},{components:t})):r.createElement(d,l({ref:n},c))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,l=new Array(a);l[0]=y;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i[m]="string"==typeof e?e:o,l[1]=i;for(var s=2;s<a;s++)l[s]=t[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}y.displayName="MDXCreateElement"},57648:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var r=t(87462),o=(t(67294),t(3905));const a={},l="Employes",i={unversionedId:"Employes",id:"Employes",title:"Employes",description:"Employes In General",source:"@site/docs/Employes.md",sourceDirName:".",slug:"/Employes",permalink:"/Girra-Framework/docs/Employes",draft:!1,editUrl:"https://github.com/CubieDays/Girra-Framework/edit/main/docs/Employes.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Networking",permalink:"/Girra-Framework/docs/Networking"},next:{title:"Jobs",permalink:"/Girra-Framework/docs/Jobs"}},p={},s=[{value:"Employes In General",id:"employes-in-general",level:2},{value:"How to Get / Make Employes?",id:"how-to-get--make-employes",level:2},{value:"When you can Hire and What Can you hire?",id:"when-you-can-hire-and-what-can-you-hire",level:4}],c={toc:s},m="wrapper";function u(e){let{components:n,...t}=e;return(0,o.kt)(m,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"employes"},"Employes"),(0,o.kt)("h2",{id:"employes-in-general"},"Employes In General"),(0,o.kt)("p",null,"An Employ is an object that does not more than one operation.\nEmploy is like a dependency for a job that can be used to operate something or save something."),(0,o.kt)("h2",{id:"how-to-get--make-employes"},"How to Get / Make Employes?"),(0,o.kt)("p",null,"Somewhere there's functions and properties inside your job that automaticly created "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"Job: {\n    Fire: (Name: string) -> ()\n    Hire: (Name: string) -> Employ\n    Employes: { [any]: Employ }\n    --\x3e Some Other Methods And Objects\n}\n")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Employ's Functions Are not the Same\nWhen Hiring an Employ it will return this table\n{ Work: (), Job: {} }"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'local Job = Girra.CreateJob() {\n    Name = "Test"\n}\n\nlocal Employ = Job.Hire("Employ").Work()\nprint(Employ.Job.Name) --\x3e Test\n'))),(0,o.kt)("h4",{id:"when-you-can-hire-and-what-can-you-hire"},"When you can Hire and What Can you hire?"),(0,o.kt)("p",null,"You can hire if the employ is not already working on another job like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'Job1.Hire("MyEmploy") --\x3e Success Will Continue and Return The Employ\nJob2.Hire("MyEmploy") --\x3e Fails and Errors\n')),(0,o.kt)("p",null,"You can only Hire Employes that are required by the default ",(0,o.kt)("inlineCode",{parentName:"p"},".Start()")," Function and Stored Inside Employes Local Table."),(0,o.kt)("p",null,"Making Employes is not diffcult or new it's just like creating a job but it has some unique functions different than job functions + passing some functions will be useless"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'local Employ = Girra.CreateEmploy() {\n    Name = "Employ"\n}\n\nfunction Employ:OnWork()\n    print("Worked") --\x3e Working\nend\n\nfunction Employ:OnHire()\n    print("Hired") --\x3e Hired\n    return function()\n        print("Fired") --\x3e Fired\n    end\nend\n')))}u.isMDXComponent=!0}}]);