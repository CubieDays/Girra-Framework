"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[797],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>g});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),p=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=p(e.components);return r.createElement(u.Provider,{value:n},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=p(t),d=a,g=m["".concat(u,".").concat(d)]||m[d]||c[d]||o;return t?r.createElement(g,i(i({ref:n},s),{},{components:t})):r.createElement(g,i({ref:n},s))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l[m]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},31875:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=t(87462),a=(t(67294),t(3905));const o={sidebar_position:3},i=void 0,l={unversionedId:"Getting Started",id:"Getting Started",title:"Getting Started",description:"Getting Started",source:"@site/docs/Getting Started.md",sourceDirName:".",slug:"/Getting Started",permalink:"/Girra-Framework/docs/Getting Started",draft:!1,editUrl:"https://github.com/CubieDays/Girra-Framework/edit/main/docs/Getting Started.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"defaultSidebar",previous:{title:"Installation",permalink:"/Girra-Framework/docs/Installation"},next:{title:"Signals",permalink:"/Girra-Framework/docs/Signals"}},u={},p=[{value:"Getting Started",id:"getting-started",level:2},{value:"Creating an Employee",id:"creating-an-employee",level:2},{value:"Hiring an Employee",id:"hiring-an-employee",level:2},{value:"Creating a Job",id:"creating-a-job",level:2},{value:"Communicating with Jobs",id:"communicating-with-jobs",level:2},{value:"Creating a  job",id:"creating-a--job",level:3},{value:"Creating an employee.",id:"creating-an-employee-1",level:3}],s={toc:p},m="wrapper";function c(e){let{components:n,...t}=e;return(0,a.kt)(m,(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"getting-started"},"Getting Started"),(0,a.kt)("p",null,"Girra is a Roblox game framework that uses a unique structure called ",(0,a.kt)("strong",{parentName:"p"},"Jobs & Employees"),". A job is like a core script of the game, and an employee will help a specific job or multiple jobs. Helping multiple jobs is called a ",(0,a.kt)("strong",{parentName:"p"},"Shared Employee"),", and helping one job is called a ",(0,a.kt)("strong",{parentName:"p"},"Solo Employee"),"."),(0,a.kt)("p",null,"To get started with Girra, you need to call the ",(0,a.kt)("inlineCode",{parentName:"p"},"Girra.Start(ServerScriptService)({...})")," method In your main script. The ",(0,a.kt)("inlineCode",{parentName:"p"},"...")," parameter is a table that contains the following configurations:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"Debugging = {\n    InGameDebugging = {\n        SignalDebugging = true,\n        NetworkDebugging = true,\n        JobDebugging = false,\n        OutputDebugging = false,\n    },\n    InStudioDebugging = {\n        SignalDebugging = true,\n        NetworkDebugging = true,\n        JobDebugging = true,\n        OutputDebugging = true,\n    }\n}\n")),(0,a.kt)("h2",{id:"creating-an-employee"},"Creating an Employee"),(0,a.kt)("p",null,"To create an employee, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"Girra.CreateEmployee() ({...})")," method. The employee should have the following properties and functions:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"OnHire()"),": This function returns a function called ",(0,a.kt)("inlineCode",{parentName:"li"},"Cleanup"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"OnWork()"),": This function is used specifically for loops but can be used in real-time. You can spawn it via ",(0,a.kt)("inlineCode",{parentName:"li"},"Employee.Work(void)"),".\nThe properties are:"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"EmployeeName"),": The name of the employee.")),(0,a.kt)("h2",{id:"hiring-an-employee"},"Hiring an Employee"),(0,a.kt)("p",null,"To make an employee help a job, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"Job.Hire(EmployeeName)")," function."),(0,a.kt)("p",null,"I hope this helps! Let me know if you have any other questions."),(0,a.kt)("h2",{id:"creating-a-job"},"Creating a Job"),(0,a.kt)("p",null,"To create a job, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"Girra.CreateJob() ({...})")," method. A job should have the following properties and functions:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"OnInit()"),": This function is used for initializing the game for future use, such as creating a network or getting it, creating a signal, or adding some properties to the job."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"OnStart()"),": This function is used for doing some future purposes, such as hiring an employee, using a job\u2019s function, or creating a class."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"OnStep()")," ","["," Optional ]: This function is used for loops but can be used in real-time."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"OnRender")," ","["," Client ], ","["," Optional ]: This function is used for rendering on the client-side."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"OnHeart()")," ","["," Optional ]: This function is used for heartbeats.")),(0,a.kt)("p",null,"The properties are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Name"),": The name of the job."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Any")," ","["," Any ]: Any value, including strings, numbers, booleans, and threads.")),(0,a.kt)("h2",{id:"communicating-with-jobs"},"Communicating with Jobs"),(0,a.kt)("p",null,"To communicate with jobs, you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"Girra.GetJob(Name)")," or require the module. However, you shouldn\u2019t make the module like this for requiring the module:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local Job = Girra.CreateJob () ({\n    Name = "Job"\n})\nreturn Job\n')),(0,a.kt)("p",null,"Instead, you should use:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local Job = { Name = "Job" }\nGirra.CreateJob() (Job)\nreturn Job \n')),(0,a.kt)("p",null,"Here's examples for creating Jobs & Employees."),(0,a.kt)("h3",{id:"creating-a--job"},"Creating a  job"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local SomeJob = { Name = "SomeJob" }\n\nfunction SomeJob:OnInit()\n  print("Initialized!")\nend\n\nfunction SomeJob:OnStart()\n  print("Started!")\nend\n\nfunction SomeJob:OnStep()\n  print("Loop")\nend\n\nfunction SomeJob:OnRender() --\x3e Render Looping\n  print("Render Loop (RenderStepped)")\nend\n\nfunction SomeJob:OnHeart()\n  print("Heartbeated")\nend\n\nGirra.CreateJob() (SomeJob)\nreturn SomeJob\n')),(0,a.kt)("h3",{id:"creating-an-employee-1"},"Creating an employee."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local SomeEmployee = Girra.CreateEmployee() {\n  Name = "SomeEmployee"\n}\n\nfunction SomeEmployee:OnHire()\n  local Connection = SomeConnection\n  return function()\n    Connection:Disconnect()\n  end\nend\n\nfunction SomeEmployee:OnWork()\n  print("Worked")\nend \n\nreturn SomeEmployee\n')),(0,a.kt)("p",null,"Lastly, getting jobs is not preferred, and you can instead use classes that help jobs with multiple tasks, unlike employees, or use modules."))}c.isMDXComponent=!0}}]);