"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[568],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},b=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(t),b=o,m=d["".concat(s,".").concat(b)]||d[b]||p[b]||a;return t?r.createElement(m,i(i({ref:n},c),{},{components:t})):r.createElement(m,i({ref:n},c))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=b;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:o,i[1]=l;for(var u=2;u<a;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}b.displayName="MDXCreateElement"},63944:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var r=t(87462),o=(t(67294),t(3905));const a={},i="Jobs",l={unversionedId:"Jobs",id:"Jobs",title:"Jobs",description:"What are the Jobs?",source:"@site/docs/Jobs.md",sourceDirName:".",slug:"/Jobs",permalink:"/Girra-Framework/docs/Jobs",draft:!1,editUrl:"https://github.com/CubieDays/Girra-Framework/edit/main/docs/Jobs.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Employes",permalink:"/Girra-Framework/docs/Employes"}},s={},u=[{value:"What are the Jobs?",id:"what-are-the-jobs",level:2},{value:"Client Jobs",id:"client-jobs",level:2},{value:"Folder Location",id:"folder-location",level:3},{value:"Server Jobs",id:"server-jobs",level:2},{value:"Folder Locations",id:"folder-locations",level:3},{value:"Creating Job:",id:"creating-job",level:2},{value:"Example:",id:"example",level:2},{value:"Client-Job Functions:",id:"client-job-functions",level:2},{value:":OnInit()",id:"oninit",level:3},{value:":OnStart()",id:"onstart",level:3},{value:":OnStep()",id:"onstep",level:3},{value:":OnRender()",id:"onrender",level:3},{value:"Job - Job Communication:",id:"job---job-communication",level:2},{value:"Job 1:",id:"job-1",level:3},{value:"Job 2:",id:"job-2",level:3},{value:"Creating Signal:",id:"creating-signal",level:3},{value:"Creating function:",id:"creating-function",level:3}],c={toc:u},d="wrapper";function p(e){let{components:n,...t}=e;return(0,o.kt)(d,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"jobs"},"Jobs"),(0,o.kt)("h2",{id:"what-are-the-jobs"},"What are the Jobs?"),(0,o.kt)("p",null,"Jobs Defines into two: Server-Jobs And Client-Jobs."),(0,o.kt)("h2",{id:"client-jobs"},"Client Jobs"),(0,o.kt)("h3",{id:"folder-location"},"Folder Location"),(0,o.kt)("p",null,"The Best Locations of Client-Jobs Folder are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"StarterPlayerScripts"),(0,o.kt)("li",{parentName:"ul"},"ReplicatedFirst")),(0,o.kt)("h2",{id:"server-jobs"},"Server Jobs"),(0,o.kt)("h3",{id:"folder-locations"},"Folder Locations"),(0,o.kt)("p",null,"The Best Locations of Server-Jobs Folder are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"ServerStorage"),(0,o.kt)("li",{parentName:"ul"},"ServerScriptService",(0,o.kt)("admonition",{parentName:"li",type:"danger"},(0,o.kt)("p",{parentName:"admonition"},"Server Jobs should be always hidden from the client or the source code maybe leaked to exploiters!")))),(0,o.kt)("h2",{id:"creating-job"},"Creating Job:"),(0,o.kt)("p",null,"Creating Job is so easy require Girra Framework\nand then CreateJob using: .CreateJob() { Name: STRING }"),(0,o.kt)("h2",{id:"example"},"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'--\x3e Game Services:\nlocal ReplicatedStorage = game:GetService("ReplicatedStorage")\n\n--\x3e Varibles:\nlocal Girra = require(ReplicatedStorage.Packages.Girra):GetClient() --\x3e Or GetServer()\n\n--\x3e Init:\nlocal MyJob = Girra.CreateJob() {\n    Name = "MyJob"\n}\n\n--\x3e Job Functions:\nfunction MyJob:OnInit() --\x3e Runs when the Job initallized. used for creating events and properties.\nend\n\nfunction MyJob:OnStart() --\x3e Safe for getting other Jobs!\n\nend\n\nfunction MyJob:OnStep() --\x3e Runs every Step after The Job Initallized\n\nend\n\nfunction MyJob:Render() --\x3e Runs every frame after the Job Initallized For Client Only!\n\nend\n\nreturn 0; --\x3e you can use return MyJob; 0 means Jobs cant get required externally from other scripts\n')),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},'Job Name is necessary! { "MyJob" }')),(0,o.kt)("h2",{id:"client-job-functions"},"Client-Job Functions:"),(0,o.kt)("p",null,"Client-Jobs contains 4 main functions that can be used but are not necessary:"),(0,o.kt)("h3",{id:"oninit"},":OnInit()"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Runs when the Job first initallized "),(0,o.kt)("li",{parentName:"ul"},"Used for creating events and properties."),(0,o.kt)("li",{parentName:"ul"},"Not Save for getting any Job!")),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Don't get Job on this function! .GetJob( name: STRING )")),(0,o.kt)("h3",{id:"onstart"},":OnStart()"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Runs when the Job started and ready to go"),(0,o.kt)("li",{parentName:"ul"},"Used for communicating Job to Job and Client-Job to Server-Job"),(0,o.kt)("li",{parentName:"ul"},"Save for getting Jobs!")),(0,o.kt)("h3",{id:"onstep"},":OnStep()"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Runs every Step: RunService.Stepped"),(0,o.kt)("li",{parentName:"ul"},"Used for looping")),(0,o.kt)("h3",{id:"onrender"},":OnRender()"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Runs every Frame: RunService.RenderStepped"),(0,o.kt)("li",{parentName:"ul"},"Used for looping renders like Camera Loops etc and rendering."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("admonition",{parentName:"li",title:"Client Only!",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"This function will not be used from Girra if it's on a Server-Job")))),(0,o.kt)("h2",{id:"job---job-communication"},"Job - Job Communication:"),(0,o.kt)("p",null,"Job Communication is too easy simply we will put 2 Jobs example:"),(0,o.kt)("h3",{id:"job-1"},"Job 1:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'--\x3e Init:\nlocal Job1 = Girra.CreateJob() {\n    Event = Girra.CreateSignal()\n    Name = "Job1"\n}\n\n--\x3e Job Functions:\nfunction Job1:OnInit()\n    Job1.Event:Listen(function()\n        print("Yay!", "I got fired by Other Job!")\n    end)\nend\n\nfunction Job1:OnStart()\n    local Job2 = Girra.GetJob("Job2")\n\n    Job2:Print("I Love IceCream!")\nend\n\nreturn 0;\n')),(0,o.kt)("h3",{id:"job-2"},"Job 2:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'local Job2 = Girra.CreateJob() {\n    Name = "MyJob2"\n}\n\n--\x3e Job Functions:\nfunction Job2:Print(...: string)\n    print("Invoked and Printed:", ...)\nend\n\nfunction Job2:OnStart()\n    local Job1 = Girra.GetJob("Job1")\n    Job1.Event:Fire()\nend\n\nreturn 0;\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-md",metastring:'title="Input"',title:'"Input"'},"    Invoked and Printed: I Love IceCream\n    Yay! I got fired by Other Job!\n")),(0,o.kt)("p",null,"As we can see in this example we created a ",(0,o.kt)("inlineCode",{parentName:"p"},"signal")," and a ",(0,o.kt)("inlineCode",{parentName:"p"},"function"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Job1")," Invokes Print() function and ",(0,o.kt)("inlineCode",{parentName:"p"},"Job2")," Fires a ",(0,o.kt)("inlineCode",{parentName:"p"},"signal"),". We got the jobs using Girra.GetJob() and this will remove the intellisense because of the way luau works however you can use require(module) instead and this will fix  the intellisense but you  need to start the framework with the ",(0,o.kt)("inlineCode",{parentName:"p"},"begin")," method and instead of creating the job .CreateJob() you just place a normal table with a name and the default functions!"),(0,o.kt)("h3",{id:"creating-signal"},"Creating Signal:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"Girra.CreateSignal()\n")),(0,o.kt)("h3",{id:"creating-function"},"Creating function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"function Job:MyFunction() end\n")))}p.isMDXComponent=!0}}]);