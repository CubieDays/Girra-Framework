"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[818],{22680:e=>{e.exports=JSON.parse('{"functions":[{"name":"Start","desc":"Starts Girra on the Client-Side!\\n```lua\\nlocal Girra = require(game.ReplicatedStorage.Girra):GetClient()\\n\\nGirra.Start(0) {\\n\\tDebugging = {\\n\\t\\tInGameDebugging = { SignalDebugging = false }\\n\\t\\tInStudioDebugging = { SignalDebugging = true }\\n\\t}\\n}\\n\\n--[[ \\n\\t0 Is just an example make sure you have a folder in \\n\\tStarterPlayerScripts or PlayerScripts or ReplicatedFirst\\n\\tand has these children: {\\n\\tEmployees: Folder,\\n\\tJobs: Folder,\\n\\tRuntime: Script\\n}\\n]]\\n```","params":[{"name":"GameLocation","desc":"","lua_type":"Instance\\n"}],"returns":[{"desc":"","lua_type":"() -> (Settings)"}],"function_type":"static","yields":true,"source":{"line":759,"path":"lib/Client/Init.luau"}},{"name":"OnStart","desc":"Returns an RBXScriptConnection.\\n```lua\\nlocal Girra = require(game.ReplicatedStorage.Girra):GetClient()\\n\\nGirra.OnStart(function()\\n\\tprint(\\"Started!\\")\\nend)\\n```\\nFires when Girra Framework Starts on Client!\\n:::caution\\nThis function should be on top of and before .Start() function runs\\n:::","params":[{"name":"Callback","desc":"","lua_type":"(T...) -> ()"}],"returns":[{"desc":"","lua_type":"RBXScriptConnection"}],"function_type":"static","source":{"line":803,"path":"lib/Client/Init.luau"}},{"name":"GetJob","desc":"Gets a Job From the Jobs Folder.\\n```lua\\nlocal Girra = require(game.ReplicatedStorage.Girra):GetClient()\\n\\nGirra.GetJob(\\"MyJob\\"):DoSomething()\\n```","params":[{"name":"Name","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"Job"}],"function_type":"static","source":{"line":817,"path":"lib/Client/Init.luau"}},{"name":"CreateSignal","desc":"Creates a Signal that can be used to intract with scripts and modules\\nSignals can be refrenced by string and thats (Recommended) for Jobs and just easier to navigate\\nAlso it can be used for Classes and that way you don\'t need to refrence a name here\'s an example:\\n\\nNon Refrenced Signal Object:\\n```lua\\nlocal Girra = require(game.ReplicatedStorage.Girra):GetClient()\\n\\nlocal Job = {} --\x3e Example\\n\\nJob.Signal = Girra.CreateSignal()\\nJob.Signal:Fire(\\"Hello Other Job!\\")\\n```\\nRefrenced Signal Object:\\n```lua\\nlocal Girra = require(game.ReplicatedStorage.Girra):GetClient()\\n\\nlocal Job = {} --\x3e Example\\n\\nSignal = Girra.CreateSignal(\\"MySignal\\")\\nSignal:Fire(\\"Hello Other Job!\\")\\n```\\n\\n:::note Debugging\\nCurrently Debugging will not work in Signal we will work on updates to make signal debugging\\n:::","params":[{"name":"Name","desc":"","lua_type":"string?"}],"returns":[{"desc":"","lua_type":"Signal"}],"function_type":"static","source":{"line":851,"path":"lib/Client/Init.luau"}},{"name":"GetSignal","desc":"Gets a Signal that is refrenced by Name\\n```lua\\nlocal Girra = require(game.ReplicatedStorage.Girra):GetClient()\\n\\nlocal Job = {} --\x3e Example\\n\\nSignal = Girra.GetSignal(\\"MySignal\\")\\nSignal:Listen(function(Msg) \\n\\tprint(\\"Got A Message:\\", Msg)\\nend)\\n```","params":[{"name":"Name","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"Signal?"}],"function_type":"static","source":{"line":876,"path":"lib/Client/Init.luau"}},{"name":"GetNetwork","desc":"Gets a network that\'s created in server-side\\n```lua\\nlocal Girra = require(game.ReplicatedStorage.Girra):GetClient()\\n\\nlocal Network = Girra.GetNetwork(\\"MyNetwork\\")\\nNetwork:Fire(\\"Hello From Client-Job!\\")\\n```","params":[{"name":"Name","desc":"","lua_type":"string"},{"name":"AutoIdentifier","desc":"","lua_type":"boolean?"}],"returns":[{"desc":"","lua_type":"Network?"}],"function_type":"static","source":{"line":900,"path":"lib/Client/Init.luau"}},{"name":"CreateJob","desc":"Creates a Job\\n```lua\\nlocal Girra = require(game.ReplicatedStorage.Girra):GetClient()\\n\\nlocal MyJob = Girra.CreateJob() {\\n\\tName = \\"MyJob\\"\\n}\\n```\\n:::tip requiring() \\nYou can create an empty table as a module and then return it and use the CreateJob function putting inside the callback the function\\n```lua\\nlocal Girra = require(game.ReplicatedStorage.Girra):GetClient()\\n\\nlocal MyJob = {\\n\\tName = \\"MyJob\\"\\n}\\nGirra.CreateJob() (MyJob)\\n\\nreturn MyJob --\x3e Can get required and used without .GetJob require(MyJob):DoSomething()\\n```\\n:::","params":[],"returns":[{"desc":"","lua_type":"(Job) -> Job"}],"function_type":"static","source":{"line":941,"path":"lib/Client/Init.luau"}},{"name":"CreateEmployee","desc":"Creates AN Employee class\\n```lua\\nlocal Girra = require(game.ReplicatedStorage.Girra):GetClient()\\n\\nlocal MyEmployee = Girra.CreateEmployee() ({\\n\\tName = \\"MyEmployee\\"\\n})\\n```\\nThere\'s no need to external require as this uses default functions: OnHire(), OnWork()","params":[],"returns":[{"desc":"","lua_type":"(Employee) -> ()"}],"function_type":"static","source":{"line":959,"path":"lib/Client/Init.luau"}}],"properties":[{"name":"Services","desc":"Refrence to Used Game Services example:\\n```lua\\nlocal Girra = require(game.ReplicatedStorage.Girra):GetClient()\\nlocal Services = Girra.Services\\n\\n--\x3e InputBegan Function:\\nServices.UserInputService.InputBegan:Connect(function()\\n\\nend)\\n```","lua_type":"Services","readonly":true,"source":{"line":138,"path":"lib/Client/Init.luau"}},{"name":"Client","desc":"Refrence to Players.LocalPlayer\\n```lua\\nlocal Girra = require(game.ReplicatedStorage.Girra):GetClient()\\n\\nprint(Girra.Client.Name) --\x3e Prints Player Name\\n```","lua_type":"Player","readonly":true,"source":{"line":152,"path":"lib/Client/Init.luau"}},{"name":"Gui","desc":"Refrence to Client.PlayerGui\\n```lua\\nlocal Girra = require(game.ReplicatedStorage.Girra):GetClient()\\n\\nprint(Girra.Gui.Name) --\x3e Prints PlayerGui\\n```","lua_type":"PlayerGui","readonly":true,"source":{"line":166,"path":"lib/Client/Init.luau"}}],"types":[{"name":"Debugging","desc":" \\nDebugging Settings","lua_type":"{InGameDebugging: {JobDebugging: boolean, SignalDebugging: boolean, NetworkDebugging: boolean}, InStudioDebugging: {JobDebugging: boolean, SignalDebugging: boolean, NetworkDebugging: boolean}}","source":{"line":63,"path":"lib/Client/Init.luau"}},{"name":"Settings","desc":":::note Used by Girra.Start()\\nThis Type Is used for Girra.Start() Function\\n:::","lua_type":"{ Debugging: Debugging }","source":{"line":73,"path":"lib/Client/Init.luau"}},{"name":"Job","desc":"Class Job of GirraClient Which Is Module.","fields":[{"name":"Name","lua_type":"string","desc":""},{"name":"OnInit","lua_type":"() -> ()","desc":""},{"name":"OnStart","lua_type":"() -> ()","desc":""},{"name":"OnStep","lua_type":"(deltaTime: number) -> ()","desc":""},{"name":"Heartbeat","lua_type":"(deltaTime: number) -> ()","desc":""},{"name":"OnRender","lua_type":"(deltaTime: number)  -> ()","desc":""},{"name":"Fire","lua_type":"(Name: string) -> ()","desc":""},{"name":"Hire","lua_type":"(Name: string) -> HiredEmployee,","desc":""}],"source":{"line":89,"path":"lib/Client/Init.luau"}},{"name":"HiredEmployee","desc":"Class Employee of GirraClient Which Is Module.","fields":[{"name":"Job","lua_type":"Job","desc":""},{"name":"Work","lua_type":"()","desc":""}],"source":{"line":98,"path":"lib/Client/Init.luau"}},{"name":"Employee","desc":"Class Employee of GirraClient Which Is Module.","fields":[{"name":"Name","lua_type":"string","desc":""},{"name":"OnWork","lua_type":"(self: any)","desc":""},{"name":"OnHire","lua_type":"(self: any)","desc":""}],"source":{"line":108,"path":"lib/Client/Init.luau"}},{"name":"Services","desc":"Type Services of GirraClient Which IsA Table Contains Game-Services.","fields":[{"name":"Players","lua_type":"Players","desc":""},{"name":"UserInputService","lua_type":"UserInputService","desc":""},{"name":"RunService","lua_type":"RunService","desc":""},{"name":"ReplicatedStorage","lua_type":"ReplicatedStorage","desc":""},{"name":"Workspace","lua_type":"Workspace","desc":""}],"source":{"line":120,"path":"lib/Client/Init.luau"}}],"name":"GirraClient","desc":"The Client-Side Of Girra Let\'s you Create Signals and Jobs.\\n\\nGetting Girra Client:\\n```lua\\nlocal Girra = require(game.ReplicatedStorage.Girra):GetClient()\\n\\n--\x3e Starting Girra:\\nGirra.Start(0) {\\n\\tDebugging = {\\n\\t\\tInGameDebugging = {\\n\\t\\t\\tJobDebugging = false, \\t\\t\\t\\n\\t\\t    NetworkDebugging = true,\\n\\t\\t    SignalDebugging = true,\\n\\t\\t},\\n\\t\\tInStudioDebugging = {\\n\\t\\t\\tJobDebugging = true, \\t\\t\\t\\n\\t\\t\\tNetworkDebugging = true,\\n\\t\\t\\tSignalDebugging = true,\\n\\t\\t}\\n\\t};\\n}\\n\\n--\x3e 0 Means The Default Jobs Folder Location: game.StarterPlayer.StarterPlayerScripts\\n```","realm":["Client"],"source":{"line":56,"path":"lib/Client/Init.luau"}}')}}]);