[{"title":"GirraFramework","type":0,"sectionRef":"#","url":"/Girra-Framework/api/GirraFramework","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"GirraFramework","url":"/Girra-Framework/api/GirraFramework#functions","content":" "},{"title":"GetClient​","type":1,"pageTitle":"GirraFramework","url":"/Girra-Framework/api/GirraFramework#GetClient","content":"This item only works when running on the client. Client &lt;/&gt; GirraFramework:GetClient() → GirraClient local Gira = require(game.ReplicatedStorage.Gira):GetClient()   "},{"title":"GetServer​","type":1,"pageTitle":"GirraFramework","url":"/Girra-Framework/api/GirraFramework#GetServer","content":"This item only works when running on the server. Server &lt;/&gt; GirraFramework:GetServer() → GirraServer local Gira = require(game.ReplicatedStorage.Gira):GetServer()   "},{"title":"GetFrameworkServer​","type":1,"pageTitle":"GirraFramework","url":"/Girra-Framework/api/GirraFramework#GetFrameworkServer","content":"This item only works when running on the server. Server &lt;/&gt; GirraFramework:GetFrameworkServer() → GirraServer Allias for Girra:GetServer()  "},{"title":"GetFrameworkClient​","type":1,"pageTitle":"GirraFramework","url":"/Girra-Framework/api/GirraFramework#GetFrameworkClient","content":"This item only works when running on the client. Client &lt;/&gt; GirraFramework:GetFrameworkClient() → GirraClient Allias for Girra:GetClient() "},{"title":"Data","type":0,"sectionRef":"#","url":"/Girra-Framework/api/Data","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Data","url":"/Girra-Framework/api/Data#types","content":" "},{"title":"Profile​","type":1,"pageTitle":"Data","url":"/Girra-Framework/api/Data#Profile","content":"&lt;/&gt; interface Profile { Player: {Data: {...: any}} }   "},{"title":"DataStore​","type":1,"pageTitle":"Data","url":"/Girra-Framework/api/Data#DataStore","content":"&lt;/&gt; interface DataStore { Get: ( self: Data, Player: Player , Key: string ) → () Set: ( self: Data, Player: Player , Key: string, Value: any ) → () Update: ( self: Data, Player: Player , Key: string, Callback: (OldData) → () ) }  "},{"title":"Functions​","type":1,"pageTitle":"Data","url":"/Girra-Framework/api/Data#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Data","url":"/Girra-Framework/api/Data#new","content":"&lt;/&gt; Data.new( Name: string, DataTable: {any: any} ) → Data This is the main function which creates a new data with the given name and the given table local Data = Framework:GetData() local NewData = Data.new(&quot;leaderstats&quot;, { [&quot;Cash&quot;] = 15, }) It Returns a metatable of empty table and Data which have .__index metamethod.  "},{"title":"GetData​","type":1,"pageTitle":"Data","url":"/Girra-Framework/api/Data#GetData","content":"&lt;/&gt; Data.GetData(Name: string) → Data This function Gets created data From The Data Library local Data = Framework:GetData() local NewData = Data.new(&quot;leaderstats&quot;, { [&quot;Cash&quot;] = 15, }) Data:GetData(&quot;leaderstats&quot;):Set([Player], &quot;Cash&quot;, 200) It Returns a metatable of empty table and Data which have .__index metamethod.  "},{"title":"GetProfile​","type":1,"pageTitle":"Data","url":"/Girra-Framework/api/Data#GetProfile","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Data:GetProfile(Player: Player ) → () This function returns the profile of the player local Data = Framework:GetData() local MyData = Data.new(&quot;leaderstats&quot;, {}) local PlayerData = MyData:GetProfile(&quot;[PlayerName]&quot;)   "},{"title":"Get​","type":1,"pageTitle":"Data","url":"/Girra-Framework/api/Data#Get","content":"&lt;/&gt; Data:Get( Player: Player , Key: string ) → () local Data = Framework:GetData() local MyData = Data.new(&quot;leaderstats&quot;, {Cash = 15}) local Cash = MyData:Get(&quot;[PlayerName]&quot;, &quot;Cash&quot;) --&gt; 15 This function returns the profilekey of the player Profile  "},{"title":"Set​","type":1,"pageTitle":"Data","url":"/Girra-Framework/api/Data#Set","content":"&lt;/&gt; Data:Set( Player: Player , Key: string, Value: any ) → () Same as Get Function but it sets the ProfileKey of the Player Profile local Data = Framework:GetData() local MyData = Data.new(&quot;leaderstats&quot;, {Cash = 15}) local Cash = MyData:Set(&quot;[PlayerName]&quot;, &quot;Cash&quot;, 20) --&gt; 20   "},{"title":"Update​","type":1,"pageTitle":"Data","url":"/Girra-Framework/api/Data#Update","content":"&lt;/&gt; Data:Update( Player: Player , Key: string, Callback: (OldData: any) → () ) → () Updates the ProfileKey with The return of the Given Callback function with argument of OldData local Data = Framework:GetData() local MyData = Data.new(&quot;leaderstats&quot;, {Cash = 15}) MyData:Update(&quot;[PlayerName]&quot;, &quot;Cash&quot;, function(Old) return Cash + 10 --&gt; 25 end) print(MyData:Get(&quot;[PlayerName]&quot;, &quot;Cash&quot;)) --&gt; 25  "},{"title":"GirraClient","type":0,"sectionRef":"#","url":"/Girra-Framework/api/GirraClient","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#types","content":" "},{"title":"Debugging​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#Debugging","content":"&lt;/&gt; type Debugging = { InGameDebugging: { JobDebugging: boolean, SignalDebugging: boolean, NetworkDebugging: boolean }, InStudioDebugging: { JobDebugging: boolean, SignalDebugging: boolean, NetworkDebugging: boolean } } Debugging Settings  "},{"title":"Settings​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#Settings","content":"&lt;/&gt; type Settings = {Debugging: Debugging}  Used by Girra.Start() This Type Is used for Girra.Start() Function  "},{"title":"Job​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#Job","content":"&lt;/&gt; interface Job { Name: string; OnInit: () → () OnStart: () → () OnStep: (deltaTime: number) → () Heartbeat: (deltaTime: number) → () OnRender: (deltaTime: number) → () Fire: (Name: string) → () Hire: (Name: string) → HiredEmploy } Class Job of GirraClient Which Is Module.  "},{"title":"HiredEmploy​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#HiredEmploy","content":"&lt;/&gt; interface HiredEmploy { Job:: Job Work: () } Class Employ of GirraClient Which Is Module.  "},{"title":"Employ​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#Employ","content":"&lt;/&gt; interface Employ { Name: string; OnWork: (self: any) OnHire: (self: any) } Class Employ of GirraClient Which Is Module.  "},{"title":"Signal​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#Signal","content":"&lt;/&gt; interface Signal { IsActive: () → boolean, Connect: (Callback: (...any) → ()) → RBXScriptConnection, Listen: (Callback: (...any) → ()) → RBXScriptConnection, Once: (Callback: (...any) → ()) → RBXScriptConnection, Wait: () → (...any), Fire: (...any) → (), DisconnectAll: () → (), Destroy: () → (), Disconnect: () → () } Type Signal of GirraClient Which IsA Signal Object: Signal.new().  "},{"title":"Network​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#Network","content":"&lt;/&gt; interface Network { Listen: (Callback: (...any) → ()) → () Once: (Callback: (...any) → ()) → () Fire: (...: any) → () Invoke: (...: any) → () Disconnect(): → () Destroy(): → () Wait(Time:: number) → () IsListening: =() → boolean } Type Network of GirraClient Which IsA Network Object.  "},{"title":"Services​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#Services","content":"&lt;/&gt; interface Services { Players: Players UserInputService: UserInputService RunService: RunService ReplicatedStorage: ReplicatedStorage Workspace: Workspace } Type Services of GirraClient Which IsA Table Contains Game-Services. "},{"title":"Properties​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#properties","content":" "},{"title":"Services​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#Services","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; GirraClient.Services: Services Refrence to Used Game Services example: local Girra = require(game.ReplicatedStorage.Girra):GetClient() local Services = Girra.Services --&gt; InputBegan Function: Services.UserInputService.InputBegan:Connect(function() end)   "},{"title":"Client​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#Client","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; GirraClient.Client: Player  Refrence to Players.LocalPlayer local Girra = require(game.ReplicatedStorage.Girra):GetClient() print(Girra.Client.Name) --&gt; Prints Player Name   "},{"title":"Gui​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#Gui","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; GirraClient.Gui: PlayerGui  Refrence to Client.PlayerGui local Girra = require(game.ReplicatedStorage.Girra):GetClient() print(Girra.Gui.Name) --&gt; Prints PlayerGui  "},{"title":"Functions​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#functions","content":" "},{"title":"Start​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#Start","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; GirraClient.Start(GameLocation: any) → () → (Settings) Starts Girra on the Client-Side! local Girra = require(game.ReplicatedStorage.Girra):GetClient() Girra.Start(0) { Debugging = { InGameDebugging = { SignalDebugging = false } InStudioDebugging = { SignalDebugging = true } } } --&gt; 0 Means default GameLocation Location which is playerscripts   "},{"title":"OnStart​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#OnStart","content":"&lt;/&gt; GirraClient.OnStart(Callback: (...any) → ()) → RBXScriptConnection  Returns an RBXScriptConnection. local Girra = require(game.ReplicatedStorage.Girra):GetClient() Girra.OnStart(function() print(&quot;Started!&quot;) end) Runs when Girra Framework Starts on Client! caution This function should be on top of .Start() function  "},{"title":"GetJob​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#GetJob","content":"&lt;/&gt; GirraClient.GetJob(Name: string) → Job Gets a Job From the Jobs Folder. local Girra = require(game.ReplicatedStorage.Girra):GetClient() Girra.GetJob(&quot;MyJob&quot;):DoSomething()   "},{"title":"Begin​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#Begin","content":"&lt;/&gt; GirraClient.Begin(JobsFolder: Folder | number) → (Settings: Settings) → () Another Way to Start Girra, It's recommended for intellisense. local Girra = require(game.ReplicatedStorage.Girra):GetClient() Girra.Begin(0) { Debugging = { InStudioDebugging = { NetworkDebugging = false, } } }   "},{"title":"CreateSignal​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#CreateSignal","content":"&lt;/&gt; GirraClient.CreateSignal() → Signal Creates a Signal that can be used to intract with Job to Job local Girra = require(game.ReplicatedStorage.Girra):GetClient() local Job = {} --&gt; Example Job.Signal = Girra.CreateSignal() Job.Signal:Fire(&quot;Hello Other Job!&quot;) Debugging Currently Debugging will not work in Signal we will work on updates to make signal debugging  "},{"title":"GetNetwork​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#GetNetwork","content":"&lt;/&gt; GirraClient.GetNetwork(Name: string) → Network Gets a network that's created in server-side local Girra = require(game.ReplicatedStorage.Girra):GetClient() local Network = Girra.GetNetwork(&quot;MyNetwork&quot;) Network:Fire(&quot;Hello From Client-Job!&quot;)   "},{"title":"CreateJob​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#CreateJob","content":"&lt;/&gt; GirraClient.CreateJob() → (Job) → () Main Function used for .Start() and not .Begin() For Creating Jobs. local Girra = require(game.ReplicatedStorage.Girra):GetClient() local MyJob = Girra.CreateJob() { Name = &quot;MyJob&quot; }   "},{"title":"CreateEmploy​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#CreateEmploy","content":"&lt;/&gt; GirraClient.CreateEmploy() → (Employ) → () Creates Employ local Girra = require(game.ReplicatedStorage.Girra):GetClient() local MyEmploy = Girra.CreateEmploy() ({ Name = &quot;MyEmploy&quot; })  "},{"title":"GirraServer","type":0,"sectionRef":"#","url":"/Girra-Framework/api/GirraServer","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#types","content":" "},{"title":"Debugging​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#Debugging","content":"&lt;/&gt; type Debugging = { InGameDebugging: { JobDebugging: boolean, SignalDebugging: boolean, NetworkDebugging: boolean }, InStudioDebugging: { JobDebugging: boolean, SignalDebugging: boolean, NetworkDebugging: boolean } } Debugging Settings  "},{"title":"Settings​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#Settings","content":"&lt;/&gt; type Settings = {Debugging: Debugging}  Used by Girra.Start() This Type Is used for Girra.Start() Function  "},{"title":"Job​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#Job","content":"&lt;/&gt; interface Job { Name: string; OnInit: () → () OnStart: () → () OnStep: (deltaTime: number) → () Heartbeat: (deltaTime: number) → () Fire: (Name: string) → () Hire: (Name: string) → HiredEmploy Employes: {[any]: {Work: ()}} } Class Job of GirraServer Which Is Module.  "},{"title":"HiredEmploy​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#HiredEmploy","content":"&lt;/&gt; interface HiredEmploy { Job:: Job Work: () } Class Employ of GirraServer Which Is Module.  "},{"title":"Employ​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#Employ","content":"&lt;/&gt; interface Employ { Name: string; OnWork: (self: any) OnHire: (self: any) } Class Employ of GirraServer Which Is Module.  "},{"title":"Network​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#Network","content":"&lt;/&gt; interface Network { Fire: ( Player , any ) → () FireAll: (any: any) → () Listen: ( Player: Player , any ) → () Connect: ( Player: Player , any ) → () Once: ( Player: Player , any ) → () Invoke: ( timeout: number, Player: Player , any ) → () InvokeAll: ( timeout: number, any ) → () InvokeExcept: ( Players: {Player: Player }, timeout: number, any ) → () FireExcept: ( Players: {Player: Player }, any ) → () IsListening: () → boolean, Connected:: boolean Disconnect: () → () Destroy: () → () } Type Network of GirraServer Which IsA Network Object.  "},{"title":"Signal​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#Signal","content":"&lt;/&gt; interface Signal { IsActive: () → boolean, Connect: (Callback: (...any) → ()) → RBXScriptConnection, Listen: (Callback: (...any) → ()) → RBXScriptConnection, Once: (Callback: (...any) → ()) → RBXScriptConnection, Wait: () → (...any), Fire: (...any) → (), DisconnectAll: () → (), Destroy: () → (), Disconnect: () → () } Type Signal of GirraServer Which IsA Signal Object: Signal.new().  "},{"title":"Services​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#Services","content":"&lt;/&gt; interface Services { Players: Players UserInputService: UserInputService RunService: RunService ReplicatedStorage: ReplicatedStorage Workspace: Workspace } Type Services of GirraServer Which IsA Table Contains Game-Services. "},{"title":"Properties​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#properties","content":" "},{"title":"Services​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#Services","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; GirraServer.Services: Services Refrence to Used Game Services example: local Girra = require(game.ReplicatedStorage.Girra):GetServer() local Services = Girra.Services --&gt; InputBegan Function: Services.UserInputService.InputBegan:Connect(function() end)  "},{"title":"Functions​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#functions","content":" "},{"title":"Start​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#Start","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; GirraServer.Start(GameLocation: Instance | number) → () → (Settings) Starts Girra on the Server-Side! local Girra = require(game.ReplicatedStorage.Girra):GetServer() Girra.Start(0) { Debugging = { InGameDebugging = { SignalDebugging = false } InStudioDebugging = { SignalDebugging = true } } } --&gt; 0 Means default GameLocation Location which is playerscripts   "},{"title":"OnStart​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#OnStart","content":"&lt;/&gt; GirraServer.OnStart(callback: (...any) → ()) → RBXScriptConnection  Returns an RBXScriptConnection. local Girra = require(game.ReplicatedStorage.Girra):GetServer() Girra.OnStart(function() print(&quot;Started!&quot;) end) Runs when Girra Framework Starts on Server! caution This function should be on top of .Start() function  "},{"title":"GetJob​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#GetJob","content":"&lt;/&gt; GirraServer.GetJob(Name: string) → Job Gets a Job From the Jobs Folder. local Girra = require(game.ReplicatedStorage.Girra):GetServer() Girra.GetJob(&quot;MyJob&quot;):DoSomething()   "},{"title":"Begin​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#Begin","content":"&lt;/&gt; GirraServer.Begin(JobsFolder: Folder | number) → (Settings: Settings) → () Another Way to Start Girra, It's recommended for Job intellisense. local Girra = require(game.ReplicatedStorage.Girra):GetServer() Girra.Begin(0) { Debugging = { InStudioDebugging = { NetworkDebugging = false, } } }   "},{"title":"GetData​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#GetData","content":"&lt;/&gt; GirraServer.GetData() → Data Returns Data Library  "},{"title":"CreateSignal​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#CreateSignal","content":"&lt;/&gt; GirraServer.CreateSignal() → Signal Creates a Signal that can be used to intract with Job to Job local Girra = require(game.ReplicatedStorage.Girra):GetServer() local Job = {} --&gt; Example Job.Signal = Girra.CreateSignal() Job.Signal:Fire(&quot;Hello Other Job!&quot;) Debugging Currently Debugging will not work in Signal we will work on updates to make signal debugging  "},{"title":"CreateNetwork​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#CreateNetwork","content":"&lt;/&gt; GirraServer.CreateNetwork(Name: string) → Network Creates a network that communicate between Server-Job and Client-Job local Girra = require(game.ReplicatedStorage.Girra):GetServer() local Network = Girra.CreateNetwork(&quot;MyNetwork&quot;) Network:Fire([Player], &quot;Hello From Job To Job!&quot;)   "},{"title":"CreateJob​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#CreateJob","content":"&lt;/&gt; GirraServer.CreateJob() → (Job) → () Main Function used for .Start() and not .Begin(). local Girra = require(game.ReplicatedStorage.Girra):GetServer() local MyJob = Girra.CreateJob() { Name = &quot;MyJob&quot; }   "},{"title":"CreateEmploy​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#CreateEmploy","content":"&lt;/&gt; GirraServer.CreateEmploy() → (Employ) → () Creates Employ local Girra = require(game.ReplicatedStorage.Girra):GetServer() local MyEmploy = Girra.CreateEmploy() ({ Name = &quot;MyEmploy&quot; })  "}]