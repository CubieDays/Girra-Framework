[{"title":"Client","type":0,"sectionRef":"#","url":"/Girra-Framework/api/Client","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Client","url":"/Girra-Framework/api/Client#functions","content":" "},{"title":"Fire​","type":1,"pageTitle":"Client","url":"/Girra-Framework/api/Client#Fire","content":"&lt;/&gt; Client:Fire(Content: any) → () Fires the network class  "},{"title":"Listen​","type":1,"pageTitle":"Client","url":"/Girra-Framework/api/Client#Listen","content":"&lt;/&gt; Client:Listen(Callback: (Content: any)) → () Listens to a callback  "},{"title":"Once​","type":1,"pageTitle":"Client","url":"/Girra-Framework/api/Client#Once","content":"&lt;/&gt; Client:Once(Callback: (Content: any)) → () Listens once to the callback  "},{"title":"Invoke​","type":1,"pageTitle":"Client","url":"/Girra-Framework/api/Client#Invoke","content":"&lt;/&gt; Client:Invoke(Content: Content: any) → () Invokes to a OnServerInvoke function tip To make a serverinvoke funciton do: ServerIndex.OnServerInvoke = function(content) end)  "},{"title":"Wait​","type":1,"pageTitle":"Client","url":"/Girra-Framework/api/Client#Wait","content":"&lt;/&gt; Client:Wait() → () Waits for the next fire "},{"title":"GirraFramework","type":0,"sectionRef":"#","url":"/Girra-Framework/api/GirraFramework","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"GirraFramework","url":"/Girra-Framework/api/GirraFramework#functions","content":" "},{"title":"GetClient​","type":1,"pageTitle":"GirraFramework","url":"/Girra-Framework/api/GirraFramework#GetClient","content":"This item only works when running on the client. Client &lt;/&gt; GirraFramework:GetClient() → GirraClient local Gira = require(game.ReplicatedStorage.Gira):GetClient()   "},{"title":"GetServer​","type":1,"pageTitle":"GirraFramework","url":"/Girra-Framework/api/GirraFramework#GetServer","content":"This item only works when running on the server. Server &lt;/&gt; GirraFramework:GetServer() → GirraServer local Gira = require(game.ReplicatedStorage.Gira):GetServer()   "},{"title":"GetFrameworkServer​","type":1,"pageTitle":"GirraFramework","url":"/Girra-Framework/api/GirraFramework#GetFrameworkServer","content":"This item only works when running on the server. Server &lt;/&gt; GirraFramework:GetFrameworkServer() → GirraServer Allias for Girra:GetServer()  "},{"title":"GetFrameworkClient​","type":1,"pageTitle":"GirraFramework","url":"/Girra-Framework/api/GirraFramework#GetFrameworkClient","content":"This item only works when running on the client. Client &lt;/&gt; GirraFramework:GetFrameworkClient() → GirraClient Allias for Girra:GetClient() "},{"title":"Server","type":0,"sectionRef":"#","url":"/Girra-Framework/api/Server","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Server","url":"/Girra-Framework/api/Server#functions","content":" "},{"title":"Fire​","type":1,"pageTitle":"Server","url":"/Girra-Framework/api/Server#Fire","content":"&lt;/&gt; Server:Fire( Player: Player | {Player }, Content: any ) → () Fires the network class  "},{"title":"FireAll​","type":1,"pageTitle":"Server","url":"/Girra-Framework/api/Server#FireAll","content":"&lt;/&gt; Server:FireAll(Content: any) → () Fires the network class to all players  "},{"title":"FireExcept​","type":1,"pageTitle":"Server","url":"/Girra-Framework/api/Server#FireExcept","content":"&lt;/&gt; Server:FireExcept( Players: {Player }, Content: any ) → () Fires the network class to players except the ones in the table  "},{"title":"Wait​","type":1,"pageTitle":"Server","url":"/Girra-Framework/api/Server#Wait","content":"&lt;/&gt; Server:Wait() → () Waits for the next fire  "},{"title":"Listen​","type":1,"pageTitle":"Server","url":"/Girra-Framework/api/Server#Listen","content":"&lt;/&gt; Server:Listen(Callback: (Content: any)) → () Listens to a callback  "},{"title":"Once​","type":1,"pageTitle":"Server","url":"/Girra-Framework/api/Server#Once","content":"&lt;/&gt; Server:Once(Callback: (Content: any)) → () Listens once to the callback "},{"title":"GirraServer","type":0,"sectionRef":"#","url":"/Girra-Framework/api/GirraServer","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#types","content":" "},{"title":"Debugging​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#Debugging","content":"&lt;/&gt; type Debugging = { InGameDebugging: { JobDebugging: boolean, SignalDebugging: boolean, NetworkDebugging: boolean }, InStudioDebugging: { JobDebugging: boolean, SignalDebugging: boolean, NetworkDebugging: boolean } } Debugging Settings  "},{"title":"Settings​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#Settings","content":"&lt;/&gt; type Settings = {Debugging: Debugging}  Used by Girra.Start() This Type Is used for Girra.Start() Function  "},{"title":"Job​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#Job","content":"&lt;/&gt; interface Job { Name: string OnInit: () → () OnStart: () → () OnStep: (deltaTime: number) → () Heartbeat: (deltaTime: number) → () Fire: (Name: string) → () Hire: (Name: string) → HiredEmployee Employees: {[any]: {Work: ()}} } Class Job of GirraServer Which Is Module.  "},{"title":"HiredEmployee​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#HiredEmployee","content":"&lt;/&gt; interface HiredEmployee { Job: Job Work: () } Class Employee of GirraServer Which Is Module.  "},{"title":"Employee​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#Employee","content":"&lt;/&gt; interface Employee { Name: string, OnWork: (self: any), OnHire: (self: any) } Class Employee of GirraServer Which Is Module.  "},{"title":"Services​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#Services","content":"&lt;/&gt; interface Services { Players: Players UserInputService: UserInputService RunService: RunService ReplicatedStorage: ReplicatedStorage Workspace: Workspace } Type Services of GirraServer Which IsA Table Contains Game-Services. "},{"title":"Properties​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#properties","content":" "},{"title":"Services​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#Services","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; GirraServer.Services: Services Refrence to Used Game Services example: local Girra = require(game.ReplicatedStorage.Girra):GetServer() local Services = Girra.Services --&gt; InputBegan Function: Services.UserInputService.InputBegan:Connect(function() end)   "},{"title":"CplAccess​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#CplAccess","content":"&lt;/&gt; GirraServer.CplAccess: {number} Used to refrence who can access and view serverJobs in ControlPanel by opening it ( Control + G ) "},{"title":"Functions​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#functions","content":" "},{"title":"Start​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#Start","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; GirraServer.Start(GameLocation: Instance ) → () → (Settings) Starts Girra on the Server-Side! local Girra = require(game.ReplicatedStorage.Girra):GetServer() Girra.Start(0) { Debugging = { InGameDebugging = { SignalDebugging = false } InStudioDebugging = { SignalDebugging = true } } } --&gt; 0 Means default GameLocation Location which is playerscripts   "},{"title":"OnStart​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#OnStart","content":"&lt;/&gt; GirraServer.OnStart(callback: (T...) → ()) → RBXScriptConnection  Returns an RBXScriptConnection. local Girra = require(game.ReplicatedStorage.Girra):GetServer() Girra.OnStart(function() print(&quot;Started!&quot;) end) Runs when Girra Framework Starts on Server! caution This function should be on top of .Start() function  "},{"title":"GetJob​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#GetJob","content":"&lt;/&gt; GirraServer.GetJob(Name: string) → Job Gets a Job From the Jobs Folder. local Girra = require(game.ReplicatedStorage.Girra):GetServer() Girra.GetJob(&quot;MyJob&quot;):DoSomething()   "},{"title":"CreateSignal​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#CreateSignal","content":"&lt;/&gt; GirraServer.CreateSignal(Name: string) → Signal Creates a Signal that can be used to intract with Job to Job local Girra = require(game.ReplicatedStorage.Girra):GetServer() local Job = {} --&gt; Example Job.Signal = Girra.CreateSignal() Job.Signal:Fire(&quot;Hello Other Job!&quot;) Debugging Currently Debugging will not work in Signal we will work on updates to make signal debugging  "},{"title":"GetSignal​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#GetSignal","content":"&lt;/&gt; GirraServer.GetSignal(Name: string) → Signal? Gets a Signal that is refrenced by Name local Girra = require(game.ReplicatedStorage.Girra):GetServer() local Job = {} --&gt; Example Signal = Girra.GetSignal(&quot;MySignal&quot;) Signal:Listen(function(Msg) print(&quot;Got A Message:&quot;, Msg) end)   "},{"title":"CreateNetwork​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#CreateNetwork","content":"&lt;/&gt; GirraServer.CreateNetwork( Name: string, AutoIdentifier: boolean? ) → Network Creates a network that communicate between Server-Job and Client-Job local Girra = require(game.ReplicatedStorage.Girra):GetServer() local Network = Girra.CreateNetwork(&quot;MyNetwork&quot;) Network:Fire([Player], &quot;Hello From Server-Job!&quot;)   "},{"title":"CreateJob​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#CreateJob","content":"&lt;/&gt; GirraServer.CreateJob() → (Job) → () Creates Job local Girra = require(game.ReplicatedStorage.Girra):GetServer() local MyJob = Girra.CreateJob() { Name = &quot;MyJob&quot; } requiring() You can create an empty table as a module and then return it and use the CreateJob function putting inside the callback the function local Girra = require(game.ReplicatedStorage.Girra):GetServer() local MyJob = { Name = &quot;MyJob&quot; } Girra.CreateJob() (MyJob) return MyJob --&gt; Can get required and used without .GetJob require(MyJob):DoSomething()   "},{"title":"CreateEmployee​","type":1,"pageTitle":"GirraServer","url":"/Girra-Framework/api/GirraServer#CreateEmployee","content":"&lt;/&gt; GirraServer.CreateEmployee() → (Employee) → () Creates Employee local Girra = require(game.ReplicatedStorage.Girra):GetServer() local MyEmployee = Girra.CreateEmployee() ({ Name = &quot;MyEmployee&quot; })  "},{"title":"Network","type":0,"sectionRef":"#","url":"/Girra-Framework/api/Network","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Network","url":"/Girra-Framework/api/Network#functions","content":" "},{"title":"ReferenceIdentifier​","type":1,"pageTitle":"Network","url":"/Girra-Framework/api/Network#ReferenceIdentifier","content":"&lt;/&gt; Network.ReferenceIdentifier(Name: string) → Identifier Returns an Identifier.  "},{"title":"Server​","type":1,"pageTitle":"Network","url":"/Girra-Framework/api/Network#Server","content":"&lt;/&gt; Network.Server( Name: string, AutoIdentifier: boolean ) → ServerIndex Returns a server network class.  "},{"title":"Client​","type":1,"pageTitle":"Network","url":"/Girra-Framework/api/Network#Client","content":"&lt;/&gt; Network.Client( Name: string, AutoIdentifier: boolean ) → ClientIndex Returns a client network class. "},{"title":"GirraClient","type":0,"sectionRef":"#","url":"/Girra-Framework/api/GirraClient","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#types","content":" "},{"title":"Debugging​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#Debugging","content":"&lt;/&gt; type Debugging = { InGameDebugging: { JobDebugging: boolean, SignalDebugging: boolean, NetworkDebugging: boolean }, InStudioDebugging: { JobDebugging: boolean, SignalDebugging: boolean, NetworkDebugging: boolean } } Debugging Settings  "},{"title":"Settings​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#Settings","content":"&lt;/&gt; type Settings = {Debugging: Debugging}  Used by Girra.Start() This Type Is used for Girra.Start() Function  "},{"title":"Job​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#Job","content":"&lt;/&gt; interface Job { Name: string OnInit: () → () OnStart: () → () OnStep: (deltaTime: number) → () Heartbeat: (deltaTime: number) → () OnRender: (deltaTime: number) → () Fire: (Name: string) → () Hire: (Name: string) → HiredEmployee, } Class Job of GirraClient Which Is Module.  "},{"title":"HiredEmployee​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#HiredEmployee","content":"&lt;/&gt; interface HiredEmployee { Job: Job Work: () } Class Employee of GirraClient Which Is Module.  "},{"title":"Employee​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#Employee","content":"&lt;/&gt; interface Employee { Name: string OnWork: (self: any) OnHire: (self: any) } Class Employee of GirraClient Which Is Module.  "},{"title":"Services​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#Services","content":"&lt;/&gt; interface Services { Players: Players UserInputService: UserInputService RunService: RunService ReplicatedStorage: ReplicatedStorage Workspace: Workspace } Type Services of GirraClient Which IsA Table Contains Game-Services. "},{"title":"Properties​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#properties","content":" "},{"title":"Services​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#Services","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; GirraClient.Services: Services Refrence to Used Game Services example: local Girra = require(game.ReplicatedStorage.Girra):GetClient() local Services = Girra.Services --&gt; InputBegan Function: Services.UserInputService.InputBegan:Connect(function() end)   "},{"title":"Client​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#Client","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; GirraClient.Client: Player  Refrence to Players.LocalPlayer local Girra = require(game.ReplicatedStorage.Girra):GetClient() print(Girra.Client.Name) --&gt; Prints Player Name   "},{"title":"Gui​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#Gui","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; GirraClient.Gui: PlayerGui  Refrence to Client.PlayerGui local Girra = require(game.ReplicatedStorage.Girra):GetClient() print(Girra.Gui.Name) --&gt; Prints PlayerGui  "},{"title":"Functions​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#functions","content":" "},{"title":"Start​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#Start","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; GirraClient.Start(GameLocation: Instance ) → () → (Settings) Starts Girra on the Client-Side! local Girra = require(game.ReplicatedStorage.Girra):GetClient() Girra.Start(0) { Debugging = { InGameDebugging = { SignalDebugging = false } InStudioDebugging = { SignalDebugging = true } } } --[[ 0 Is just an example make sure you have a folder in StarterPlayerScripts or PlayerScripts or ReplicatedFirst and has these children: { Employees: Folder, Jobs: Folder, Runtime: Script } ]]   "},{"title":"OnStart​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#OnStart","content":"&lt;/&gt; GirraClient.OnStart(Callback: (T...) → ()) → RBXScriptConnection  Returns an RBXScriptConnection. local Girra = require(game.ReplicatedStorage.Girra):GetClient() Girra.OnStart(function() print(&quot;Started!&quot;) end) Fires when Girra Framework Starts on Client! caution This function should be on top of and before .Start() function runs  "},{"title":"GetJob​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#GetJob","content":"&lt;/&gt; GirraClient.GetJob(Name: string) → Job Gets a Job From the Jobs Folder. local Girra = require(game.ReplicatedStorage.Girra):GetClient() Girra.GetJob(&quot;MyJob&quot;):DoSomething()   "},{"title":"CreateSignal​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#CreateSignal","content":"&lt;/&gt; GirraClient.CreateSignal(Name: string?) → Signal Creates a Signal that can be used to intract with scripts and modules Signals can be refrenced by string and thats (Recommended) for Jobs and just easier to navigate Also it can be used for Classes and that way you don't need to refrence a name here's an example: Non Refrenced Signal Object: local Girra = require(game.ReplicatedStorage.Girra):GetClient() local Job = {} --&gt; Example Job.Signal = Girra.CreateSignal() Job.Signal:Fire(&quot;Hello Other Job!&quot;) Refrenced Signal Object: local Girra = require(game.ReplicatedStorage.Girra):GetClient() local Job = {} --&gt; Example Signal = Girra.CreateSignal(&quot;MySignal&quot;) Signal:Fire(&quot;Hello Other Job!&quot;) Debugging Currently Debugging will not work in Signal we will work on updates to make signal debugging  "},{"title":"GetSignal​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#GetSignal","content":"&lt;/&gt; GirraClient.GetSignal(Name: string) → Signal? Gets a Signal that is refrenced by Name local Girra = require(game.ReplicatedStorage.Girra):GetClient() local Job = {} --&gt; Example Signal = Girra.GetSignal(&quot;MySignal&quot;) Signal:Listen(function(Msg) print(&quot;Got A Message:&quot;, Msg) end)   "},{"title":"GetNetwork​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#GetNetwork","content":"&lt;/&gt; GirraClient.GetNetwork( Name: string, AutoIdentifier: boolean? ) → Network? Gets a network that's created in server-side local Girra = require(game.ReplicatedStorage.Girra):GetClient() local Network = Girra.GetNetwork(&quot;MyNetwork&quot;) Network:Fire(&quot;Hello From Client-Job!&quot;)   "},{"title":"CreateJob​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#CreateJob","content":"&lt;/&gt; GirraClient.CreateJob() → (Job) → Job Creates a Job local Girra = require(game.ReplicatedStorage.Girra):GetClient() local MyJob = Girra.CreateJob() { Name = &quot;MyJob&quot; } requiring() You can create an empty table as a module and then return it and use the CreateJob function putting inside the callback the function local Girra = require(game.ReplicatedStorage.Girra):GetClient() local MyJob = { Name = &quot;MyJob&quot; } Girra.CreateJob() (MyJob) return MyJob --&gt; Can get required and used without .GetJob require(MyJob):DoSomething()   "},{"title":"CreateEmployee​","type":1,"pageTitle":"GirraClient","url":"/Girra-Framework/api/GirraClient#CreateEmployee","content":"&lt;/&gt; GirraClient.CreateEmployee() → (Employee) → () Creates AN Employee class local Girra = require(game.ReplicatedStorage.Girra):GetClient() local MyEmployee = Girra.CreateEmployee() ({ Name = &quot;MyEmployee&quot; }) There's no need to external require as this uses default functions: OnHire(), OnWork() "},{"title":"Signal","type":0,"sectionRef":"#","url":"/Girra-Framework/api/Signal","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Signal","url":"/Girra-Framework/api/Signal#functions","content":" "},{"title":"Fire​","type":1,"pageTitle":"Signal","url":"/Girra-Framework/api/Signal#Fire","content":"&lt;/&gt; Signal:Fire(Content: any) → () Fires Signal Class  "},{"title":"FireTuple​","type":1,"pageTitle":"Signal","url":"/Girra-Framework/api/Signal#FireTuple","content":"&lt;/&gt; Signal:FireTuple(...: any) → () Fires signal Class but with tuples not tables  "},{"title":"DisconnectAll​","type":1,"pageTitle":"Signal","url":"/Girra-Framework/api/Signal#DisconnectAll","content":"&lt;/&gt; Signal:DisconnectAll() → () Destroys and disconnects signal Class  "},{"title":"Listen​","type":1,"pageTitle":"Signal","url":"/Girra-Framework/api/Signal#Listen","content":"&lt;/&gt; Signal:Listen(Callback: ( Content: any, ...any ) → ()) → () Listens to a function callback  "},{"title":"ListenOnce​","type":1,"pageTitle":"Signal","url":"/Girra-Framework/api/Signal#ListenOnce","content":"&lt;/&gt; Signal:ListenOnce(Callback: (Content: any) → ()) → () Listens to a function callback andThen disconnects "},{"title":"Debugging","type":0,"sectionRef":"#","url":"/Girra-Framework/docs/Debugging","content":"","keywords":""},{"title":"Customization​","type":1,"pageTitle":"Debugging","url":"/Girra-Framework/docs/Debugging#customization","content":"When starting Girra, it gives you options to start it, most of which are related to debugging. They are: JobDebugging: Runs when a job is initialized and required.SignalDebugging: Runs when a signal is created, fired, or disconnected.NetworkDebugging: Same as SignalDebugging but for network.OutputDebugging: Things that developers debug and use the Girra’s framework Debugger. Debugging has two modes: InGameDebugging and InStudioDebugging. InGameDebugging debugs things inside real-time games, while InStudioDebugging debugs things inside the studio. Girra.Start(ServerScriptService) ({ Debugging = { InGameDebugging = { SignalDebugging = true, NetworkDebugging = true, JobDebugging = false, OutputDebugging = false, }, InStudioDebugging = { SignalDebugging = true, NetworkDebugging = true, JobDebugging = true, OutputDebugging = true, } } })  "},{"title":"Debugging​","type":1,"pageTitle":"Debugging","url":"/Girra-Framework/docs/Debugging#debugging","content":"Debugging is very simple. Use the Debugger.Debug() function, and that will debug. Make sure to enable debugging via the OutputDebugging configuration. local Debugger = Girra.Libs.Debugger Debugger.Debug(warn, &quot;Log&quot;, &quot;An error occurred&quot;)  I hope this helps! Let me know if you have any other questions. "},{"title":"About","type":0,"sectionRef":"#","url":"/Girra-Framework/docs/intro","content":"","keywords":""},{"title":"Features​","type":1,"pageTitle":"About","url":"/Girra-Framework/docs/intro#features","content":"Fast and lightweightEasy-to-use code structureEliminates the need to use remote events and BindableEventsSimplifies the process of organizing your project "},{"title":"Usage​","type":1,"pageTitle":"About","url":"/Girra-Framework/docs/intro#usage","content":"To use Girra Framework, follow these steps: Install and Require the Girra Framework module.Use the framework's Jobs, classes, Dependencies, and functions to create a well-structured project that is easy to navigate. "},{"title":"Conclusion​","type":1,"pageTitle":"About","url":"/Girra-Framework/docs/intro#conclusion","content":"Girra Framework is a great choice for anyone looking to simplify the process of organizing their Roblox Studio project. With its easy-to-use code structure and fast performance, you can focus on creating your game without worrying about the underlying architecture. "},{"title":"Installation","type":0,"sectionRef":"#","url":"/Girra-Framework/docs/Installation","content":"","keywords":""},{"title":"Roblox Studio​","type":1,"pageTitle":"Installation","url":"/Girra-Framework/docs/Installation#roblox-studio","content":"Download Girra Framework rbxm from the github repository releases page "},{"title":"Rojo & Wally​","type":1,"pageTitle":"Installation","url":"/Girra-Framework/docs/Installation#rojo--wally","content":"Add Girra to your dependencies replace @latest with the latest girra release from github repository. wally.toml [dependencies] Girra = &quot;cubiedays/girra-framework@latest&quot;  "},{"title":"Networking","type":0,"sectionRef":"#","url":"/Girra-Framework/docs/Networking","content":"","keywords":""},{"title":"Creating a Network​","type":1,"pageTitle":"Networking","url":"/Girra-Framework/docs/Networking#creating-a-network","content":"To create a network, simply use Girra.CreateNetwork(Name: string) on the server. After that, you will notice that it returns a table with some methods like Fire and Listen, etc. local MyNetwork = Girra.CreateNetwork(&quot;MyNetwork&quot;)  "},{"title":"Getting a Network​","type":1,"pageTitle":"Networking","url":"/Girra-Framework/docs/Networking#getting-a-network","content":"Getting a network is simple, but you should be careful and make sure that the network has been created successfully on the server. You use Girra.GetNetwork(Name: string) on the client, which returns a table with some methods or a nil value if it didn’t find a network. local MyNetwork = Girra.GetNetwork(&quot;MyNetwork&quot;)  "},{"title":"Transferring Data From Client to Server (Client Firing)​","type":1,"pageTitle":"Networking","url":"/Girra-Framework/docs/Networking#transferring-data-from-client-to-server-client-firing","content":"To transfer data, you need to get the network and use Network:Fire(Data: any | {any}) to transfer data. But before that, make sure the network is listening to any callback function. local MyNetwork = Girra.GetNetwork(&quot;MyNetwork&quot;) MyNetwork:Fire({Data})  "},{"title":"Transferring Data From Server to Client (Server Firing)​","type":1,"pageTitle":"Networking","url":"/Girra-Framework/docs/Networking#transferring-data-from-server-to-client-server-firing","content":"Transferring data from server to client cuts to 3. The first one is Fire(Player, Data), the second is FireAll(Data), and the last is FireExcept(Players: {Player}, Data). local MyNetwork = Girra.CreateNetwork(&quot;MyNetwork&quot;) MyNetwork:Fire(Player, {Data}) MyNetwork:FireAll({Data}) MyNetwork:FireExcept({Player1, Player2}, {Data})  "},{"title":"Receiving Data From Client to Server​","type":1,"pageTitle":"Networking","url":"/Girra-Framework/docs/Networking#receiving-data-from-client-to-server","content":"Although you shouldn’t worry about data races because Girra handles them, you should be careful that the network listens to the callback before any data transfer happens! local MyNetwork = Girra.GetNetwork(&quot;MyNetwork&quot;) MyNetwork:Listen(function(Content) print(Content) end)  "},{"title":"Receiving Data From Server to Client​","type":1,"pageTitle":"Networking","url":"/Girra-Framework/docs/Networking#receiving-data-from-server-to-client","content":"Same as client but for server, and you need to listen before any data transfer or firing method. local MyNetwork = Girra.CreateNetwork(&quot;MyNetwork&quot;) MyNetwork:Listen(function(Content) print(Content) end)  "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/Girra-Framework/docs/Getting Started","content":"","keywords":""},{"title":"Getting Started​","type":1,"pageTitle":"Getting Started","url":"/Girra-Framework/docs/Getting Started#getting-started","content":"Girra is a Roblox game framework that uses a unique structure called Jobs &amp; Employees. A job is like a core script of the game, and an employee will help a specific job or multiple jobs. Helping multiple jobs is called a Shared Employee, and helping one job is called a Solo Employee. To get started with Girra, you need to call the Girra.Start(ServerScriptService)({...}) method In your main script. The ... parameter is a table that contains the following configurations: Debugging = { InGameDebugging = { SignalDebugging = true, NetworkDebugging = true, JobDebugging = false, OutputDebugging = false, }, InStudioDebugging = { SignalDebugging = true, NetworkDebugging = true, JobDebugging = true, OutputDebugging = true, } }  "},{"title":"Creating an Employee​","type":1,"pageTitle":"Getting Started","url":"/Girra-Framework/docs/Getting Started#creating-an-employee","content":"To create an employee, use the Girra.CreateEmployee() ({...}) method. The employee should have the following properties and functions: OnHire(): This function returns a function called Cleanup.OnWork(): This function is used specifically for loops but can be used in real-time. You can spawn it via Employee.Work(void). The properties are:EmployeeName: The name of the employee. "},{"title":"Hiring an Employee​","type":1,"pageTitle":"Getting Started","url":"/Girra-Framework/docs/Getting Started#hiring-an-employee","content":"To make an employee help a job, use the Job.Hire(EmployeeName) function. I hope this helps! Let me know if you have any other questions. "},{"title":"Creating a Job​","type":1,"pageTitle":"Getting Started","url":"/Girra-Framework/docs/Getting Started#creating-a-job","content":"To create a job, use the Girra.CreateJob() ({...}) method. A job should have the following properties and functions: OnInit(): This function is used for initializing the game for future use, such as creating a network or getting it, creating a signal, or adding some properties to the job.OnStart(): This function is used for doing some future purposes, such as hiring an employee, using a job’s function, or creating a class.OnStep() [ Optional ]: This function is used for loops but can be used in real-time.OnRender [ Client ], [ Optional ]: This function is used for rendering on the client-side.OnHeart() [ Optional ]: This function is used for heartbeats. The properties are: Name: The name of the job.Any [ Any ]: Any value, including strings, numbers, booleans, and threads. "},{"title":"Signals","type":0,"sectionRef":"#","url":"/Girra-Framework/docs/Signals","content":"","keywords":""},{"title":"Transferring Data (Firing)​","type":1,"pageTitle":"Signals","url":"/Girra-Framework/docs/Signals#transferring-data-firing","content":"To transfer data, we first need to create our signal. But before that, we should introduce you to ReferencedSignal and UnreferencedSignal. "},{"title":"Referenced Signal​","type":1,"pageTitle":"Signals","url":"/Girra-Framework/docs/Signals#referenced-signal","content":"A referenced signal is a signal that you can use by name and get it by name. Creating it is by using Girra’s .CreateSignal(Name: string?). Expect that you put a name in the arg1 as it’s not required not putting a name will create an unreferencedSignal. local ReferencedSignal = Girra.CreateSignal(&quot;ReferencedSignal&quot;)  "},{"title":"Unreferenced Signal​","type":1,"pageTitle":"Signals","url":"/Girra-Framework/docs/Signals#unreferenced-signal","content":"An unreferencedSignal is a signal that does not have a name and should be stored somewhere to get it. Creating an unreferencedSignal is simple. Use Girra’s .CreateSignal(Name: string?). Expect the opposite from ReferencedSignal. You don’t put anything on arg1 or nil. local UnreferencedSignal = Girra.CreateSignal()  And then you can get it from other scripts by storing it in a table and then retrieving it from that table. Here is an example: local mySignal = Girra.CreateSignal() -- Store the signal in a table local myTable = {} myTable.mySignal = mySignal -- Retrieve the signal from the table local retrievedSignal = myTable.mySignal  "},{"title":"Why Referenced and Unreferenced?​","type":1,"pageTitle":"Signals","url":"/Girra-Framework/docs/Signals#why-referenced-and-unreferenced","content":"When you are trying to get a signal by the fastest way without getting it from a stored table, you use strings, and that’s always better. But what’s about Unreferenced? UnreferencedSignal is always used for classes and should only be like if you are making a car. A good developer should know that classes will make his development easier and use classes. But a lot of developers use methods for classes. Only if you look at Roblox’s part instance, you should know it’s in scripting is just a table that stores properties, children, but Part instance has: methods, properties, RBXScriptSignals. Making a car class with signals will make you comfortable. "},{"title":"Transfering Data (Firing)​","type":1,"pageTitle":"Signals","url":"/Girra-Framework/docs/Signals#transfering-data-firing","content":"To transfer data, you need to create a signal and then use the :Fire(Content: any | { any }) method. With your data in Content, which is 1 argument and not a tuple. If you want to send multiple data, use a table. local Girra = require(&quot;Path.To.Girra&quot;) local Signal = Girra.CreateSignal() Signal:Fire(&quot;Hello World!.&quot;); Signal:Fire({ &quot;This is my data.&quot; });  "},{"title":"Receiving Data (Listening)​","type":1,"pageTitle":"Signals","url":"/Girra-Framework/docs/Signals#receiving-data-listening","content":"To receive data, you need to get a signal or create one and then use the :Listen(Callback: (Content: any | {any})) method. local Girra = require(&quot;Path.To.Girra&quot;) local Signal = Girra.CreateSignal() Signal:Listen(function(Content: {any} | any) { print(Content); });  "},{"title":"Transferring on Creator Script​","type":1,"pageTitle":"Signals","url":"/Girra-Framework/docs/Signals#transferring-on-creator-script","content":"Transferring on creator script means creating a signal and transferring data in the same script. Before doing that, you should listen. If you fire before listening, data will not be sent to the listened callback function. So you should follow these instructions: Create SignalWait for ListeningTransfer Data "},{"title":"Receiving on Creator Script​","type":1,"pageTitle":"Signals","url":"/Girra-Framework/docs/Signals#receiving-on-creator-script","content":"You shouldn’t worry about receiving on creator script, but you should be careful and wait a bit of time before listening after creating a signal. If the other scripts fire data, it will not receive. So you should follow these instructions: Create SignalListen Immediately "},{"title":"Communicating with Jobs​","type":1,"pageTitle":"Getting Started","url":"/Girra-Framework/docs/Getting Started#communicating-with-jobs","content":"To communicate with jobs, you can use Girra.GetJob(Name) or require the module. However, you shouldn’t make the module like this for requiring the module: local Job = Girra.CreateJob () ({ Name = &quot;Job&quot; }) return Job  Instead, you should use: local Job = { Name = &quot;Job&quot; } Girra.CreateJob() (Job) return Job  Here's examples for creating Jobs &amp; Employees. "},{"title":"Creating a job​","type":1,"pageTitle":"Getting Started","url":"/Girra-Framework/docs/Getting Started#creating-a--job","content":"local SomeJob = { Name = &quot;SomeJob&quot; } function SomeJob:OnInit() print(&quot;Initialized!&quot;) end function SomeJob:OnStart() print(&quot;Started!&quot;) end function SomeJob:OnStep() print(&quot;Loop&quot;) end function SomeJob:OnRender() --&gt; Render Looping print(&quot;Render Loop (RenderStepped)&quot;) end function SomeJob:OnHeart() print(&quot;Heartbeated&quot;) end Girra.CreateJob() (SomeJob) return SomeJob  "},{"title":"Creating an employee.​","type":1,"pageTitle":"Getting Started","url":"/Girra-Framework/docs/Getting Started#creating-an-employee-1","content":"local SomeEmployee = Girra.CreateEmployee() { Name = &quot;SomeEmployee&quot; } function SomeEmployee:OnHire() local Connection = SomeConnection return function() Connection:Disconnect() end end function SomeEmployee:OnWork() print(&quot;Worked&quot;) end return SomeEmployee  Lastly, getting jobs is not preferred, and you can instead use classes that help jobs with multiple tasks, unlike employees, or use modules. "}]